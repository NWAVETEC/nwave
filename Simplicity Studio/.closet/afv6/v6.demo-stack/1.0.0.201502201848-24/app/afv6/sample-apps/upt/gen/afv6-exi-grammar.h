// This file is generated. Please do not edit manually.
// 
//

// Enclosing macro to prevent multiple inclusion
#ifndef __EMBER_EXI_GENERATED_FILE_GRAMMAR__
#define __EMBER_EXI_GENERATED_FILE_GRAMMAR__


// This file contains the statically generated data for grammar. 

// generated from file: "sep_r60.xsd"
// generate all types: false
// requested types:
//    AbstractDevice  AccumulationBehaviourType  ActivePower  ActiveTextMessageListLink  
//    ApplianceLoadReduction  ApplianceLoadReductionType  AppliedTargetReduction  
//    CommodityType  Condition  Configuration  ConfigurationLink  ConsumptionBlockType  
//    CustomerAccountListLink  DERListLink  DERProgramListLink  DRLCCapabilities  
//    DataQualifierType  DateTimeInterval  DemandResponseProgramListLink  
//    DeviceCapability  DeviceCategoryType  DeviceInformation  DeviceInformationLink  
//    DeviceStatus  DeviceStatusLink  DrResponse  DstRuleType  DutyCycle  
//    EndDevice  EndDeviceList  EndDeviceListLink  Event  EventStatus  
//    FileListLink  FileStatusLink  FlowDirectionType  FlowReservationRequestListLink  
//    FlowReservationResponseListLink  FunctionSetAssignmentsBase  
//    FunctionSetAssignmentsListLink  IPInterfaceListLink  IdentifiedObject  
//    KindType  Link  List  ListLink  LoadShedAvailabilityLink  LocaleType  
//    LogEventListLink  MessagingProgram  MessagingProgramList  MessagingProgramListLink  
//    MeterReading  MeterReadingBase  MeterReadingList  MeterReadingListLink  
//    MirrorUsagePointListLink  Notification  Offset  PENType  PhaseCode  
//    PowerConfiguration  PowerOfTenMultiplierType  PowerSourceType  
//    PowerStatusLink  PrepaymentListLink  PriceResponseCfgListLink  
//    PrimacyType  PriorityType  RateComponentListLink  Reading  ReadingBase  
//    ReadingLink  ReadingList  ReadingListLink  ReadingSet  ReadingSetBase  
//    ReadingSetList  ReadingSetListLink  ReadingType  ReadingTypeLink  
//    RealEnergy  RegistrationLink  Resource  RespondableResource  
//    RespondableSubscribableIdentifiedObject  Response  ResponseSetListLink  
//    RoleFlagsType  SFDIType  SelfDevice  SelfDeviceLink  ServiceKind  
//    SetPoint  Status  SubscribableIdentifiedObject  SubscribableList  
//    SubscribableResource  Subscription  SubscriptionBase  SubscriptionList  
//    SubscriptionListLink  SupportedLocaleListLink  TOUType  TariffProfileListLink  
//    Temperature  TextMessage  TextMessageList  TextMessageListLink  
//    TextResponse  Time  TimeConfiguration  TimeLink  TimeOffsetType  
//    TimeType  UnitType  UnitValueType  UomType  UsagePoint  UsagePointBase  
//    UsagePointList  UsagePointListLink  VersionType  mRIDType  

// Qname count: 123
static EmberExiQname const topLevelQnames[] = {
  EMBER_EXI_QNAME_AbstractDevice,   // 0
  EMBER_EXI_QNAME_AccumulationBehaviourType,   // 1
  EMBER_EXI_QNAME_ActivePower,   // 2
  EMBER_EXI_QNAME_ActiveTextMessageListLink,   // 3
  EMBER_EXI_QNAME_ApplianceLoadReduction,   // 4
  EMBER_EXI_QNAME_ApplianceLoadReductionType,   // 5
  EMBER_EXI_QNAME_AppliedTargetReduction,   // 6
  EMBER_EXI_QNAME_CommodityType,   // 7
  EMBER_EXI_QNAME_Condition,   // 8
  EMBER_EXI_QNAME_Configuration,   // 9
  EMBER_EXI_QNAME_ConfigurationLink,   // 10
  EMBER_EXI_QNAME_ConsumptionBlockType,   // 11
  EMBER_EXI_QNAME_CustomerAccountListLink,   // 12
  EMBER_EXI_QNAME_DERListLink,   // 13
  EMBER_EXI_QNAME_DERProgramListLink,   // 14
  EMBER_EXI_QNAME_DRLCCapabilities,   // 15
  EMBER_EXI_QNAME_DataQualifierType,   // 16
  EMBER_EXI_QNAME_DateTimeInterval,   // 17
  EMBER_EXI_QNAME_DemandResponseProgramListLink,   // 18
  EMBER_EXI_QNAME_DeviceCapability,   // 19
  EMBER_EXI_QNAME_DeviceCategoryType,   // 20
  EMBER_EXI_QNAME_DeviceInformation,   // 21
  EMBER_EXI_QNAME_DeviceInformationLink,   // 22
  EMBER_EXI_QNAME_DeviceStatus,   // 23
  EMBER_EXI_QNAME_DeviceStatusLink,   // 24
  EMBER_EXI_QNAME_DrResponse,   // 25
  EMBER_EXI_QNAME_DstRuleType,   // 26
  EMBER_EXI_QNAME_DutyCycle,   // 27
  EMBER_EXI_QNAME_EndDevice,   // 28
  EMBER_EXI_QNAME_EndDeviceList,   // 29
  EMBER_EXI_QNAME_EndDeviceListLink,   // 30
  EMBER_EXI_QNAME_Event,   // 31
  EMBER_EXI_QNAME_EventStatus,   // 32
  EMBER_EXI_QNAME_FileListLink,   // 33
  EMBER_EXI_QNAME_FileStatusLink,   // 34
  EMBER_EXI_QNAME_FlowDirectionType,   // 35
  EMBER_EXI_QNAME_FlowReservationRequestListLink,   // 36
  EMBER_EXI_QNAME_FlowReservationResponseListLink,   // 37
  EMBER_EXI_QNAME_FunctionSetAssignmentsBase,   // 38
  EMBER_EXI_QNAME_FunctionSetAssignmentsListLink,   // 39
  EMBER_EXI_QNAME_IPInterfaceListLink,   // 40
  EMBER_EXI_QNAME_IdentifiedObject,   // 41
  EMBER_EXI_QNAME_KindType,   // 42
  EMBER_EXI_QNAME_Link,   // 43
  EMBER_EXI_QNAME_List,   // 44
  EMBER_EXI_QNAME_ListLink,   // 45
  EMBER_EXI_QNAME_LoadShedAvailabilityLink,   // 46
  EMBER_EXI_QNAME_LocaleType,   // 47
  EMBER_EXI_QNAME_LogEventListLink,   // 48
  EMBER_EXI_QNAME_MessagingProgram,   // 49
  EMBER_EXI_QNAME_MessagingProgramList,   // 50
  EMBER_EXI_QNAME_MessagingProgramListLink,   // 51
  EMBER_EXI_QNAME_MeterReading,   // 52
  EMBER_EXI_QNAME_MeterReadingBase,   // 53
  EMBER_EXI_QNAME_MeterReadingList,   // 54
  EMBER_EXI_QNAME_MeterReadingListLink,   // 55
  EMBER_EXI_QNAME_MirrorUsagePointListLink,   // 56
  EMBER_EXI_QNAME_Notification,   // 57
  EMBER_EXI_QNAME_Offset,   // 58
  EMBER_EXI_QNAME_PENType,   // 59
  EMBER_EXI_QNAME_PhaseCode,   // 60
  EMBER_EXI_QNAME_PowerConfiguration,   // 61
  EMBER_EXI_QNAME_PowerOfTenMultiplierType,   // 62
  EMBER_EXI_QNAME_PowerSourceType,   // 63
  EMBER_EXI_QNAME_PowerStatusLink,   // 64
  EMBER_EXI_QNAME_PrepaymentListLink,   // 65
  EMBER_EXI_QNAME_PriceResponseCfgListLink,   // 66
  EMBER_EXI_QNAME_PrimacyType,   // 67
  EMBER_EXI_QNAME_PriorityType,   // 68
  EMBER_EXI_QNAME_RateComponentListLink,   // 69
  EMBER_EXI_QNAME_Reading,   // 70
  EMBER_EXI_QNAME_ReadingBase,   // 71
  EMBER_EXI_QNAME_ReadingLink,   // 72
  EMBER_EXI_QNAME_ReadingList,   // 73
  EMBER_EXI_QNAME_ReadingListLink,   // 74
  EMBER_EXI_QNAME_ReadingSet,   // 75
  EMBER_EXI_QNAME_ReadingSetBase,   // 76
  EMBER_EXI_QNAME_ReadingSetList,   // 77
  EMBER_EXI_QNAME_ReadingSetListLink,   // 78
  EMBER_EXI_QNAME_ReadingType,   // 79
  EMBER_EXI_QNAME_ReadingTypeLink,   // 80
  EMBER_EXI_QNAME_RealEnergy,   // 81
  EMBER_EXI_QNAME_RegistrationLink,   // 82
  EMBER_EXI_QNAME_Resource,   // 83
  EMBER_EXI_QNAME_RespondableResource,   // 84
  EMBER_EXI_QNAME_RespondableSubscribableIdentifiedObject,   // 85
  EMBER_EXI_QNAME_Response,   // 86
  EMBER_EXI_QNAME_ResponseSetListLink,   // 87
  EMBER_EXI_QNAME_RoleFlagsType,   // 88
  EMBER_EXI_QNAME_SFDIType,   // 89
  EMBER_EXI_QNAME_SelfDevice,   // 90
  EMBER_EXI_QNAME_SelfDeviceLink,   // 91
  EMBER_EXI_QNAME_ServiceKind,   // 92
  EMBER_EXI_QNAME_SetPoint,   // 93
  EMBER_EXI_QNAME_SubscribableIdentifiedObject,   // 94
  EMBER_EXI_QNAME_SubscribableList,   // 95
  EMBER_EXI_QNAME_SubscribableResource,   // 96
  EMBER_EXI_QNAME_Subscription,   // 97
  EMBER_EXI_QNAME_SubscriptionBase,   // 98
  EMBER_EXI_QNAME_SubscriptionList,   // 99
  EMBER_EXI_QNAME_SubscriptionListLink,   // 100
  EMBER_EXI_QNAME_SupportedLocaleListLink,   // 101
  EMBER_EXI_QNAME_TOUType,   // 102
  EMBER_EXI_QNAME_TariffProfileListLink,   // 103
  EMBER_EXI_QNAME_Temperature,   // 104
  EMBER_EXI_QNAME_TextMessage,   // 105
  EMBER_EXI_QNAME_TextMessageList,   // 106
  EMBER_EXI_QNAME_TextMessageListLink,   // 107
  EMBER_EXI_QNAME_TextResponse,   // 108
  EMBER_EXI_QNAME_Time,   // 109
  EMBER_EXI_QNAME_TimeConfiguration,   // 110
  EMBER_EXI_QNAME_TimeLink,   // 111
  EMBER_EXI_QNAME_TimeOffsetType,   // 112
  EMBER_EXI_QNAME_TimeType,   // 113
  EMBER_EXI_QNAME_UnitType,   // 114
  EMBER_EXI_QNAME_UnitValueType,   // 115
  EMBER_EXI_QNAME_UomType,   // 116
  EMBER_EXI_QNAME_UsagePoint,   // 117
  EMBER_EXI_QNAME_UsagePointBase,   // 118
  EMBER_EXI_QNAME_UsagePointList,   // 119
  EMBER_EXI_QNAME_UsagePointListLink,   // 120
  EMBER_EXI_QNAME_VersionType,   // 121
  EMBER_EXI_QNAME_mRIDType,   // 122
};

// Sparse event codes are non-null when qnames are excluded
static int16u const qnameSparseEventCodes[] = {
  0,
  5,
  11,
  15,
  19,
  20,
  21,
  36,
  37,
  38,
  39,
  41,
  60,
  81,
  85,
  92,
  93,
  94,
  100,
  101,
  103,
  104,
  105,
  106,
  107,
  108,
  109,
  110,
  111,
  116,
  117,
  120,
  121,
  125,
  127,
  131,
  134,
  137,
  139,
  141,
  151,
  152,
  154,
  158,
  159,
  160,
  162,
  164,
  167,
  169,
  170,
  171,
  172,
  173,
  175,
  176,
  182,
  186,
  189,
  192,
  196,
  197,
  198,
  199,
  201,
  208,
  212,
  213,
  214,
  228,
  230,
  231,
  232,
  233,
  234,
  235,
  236,
  237,
  238,
  239,
  240,
  241,
  243,
  245,
  247,
  248,
  249,
  254,
  255,
  256,
  257,
  258,
  260,
  265,
  269,
  270,
  271,
  272,
  273,
  274,
  275,
  281,
  282,
  290,
  291,
  292,
  293,
  294,
  295,
  296,
  297,
  298,
  299,
  303,
  304,
  305,
  306,
  307,
  308,
  310,
  311,
  312,
  316,
};

#define GRAMMAR_0 GRAMMAR(NO_EE, XSI_TYPE, 0)
#define GRAMMAR_1 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_2 GRAMMAR(NO_EE, NO_XSI_TYPE, 14)
#define GRAMMAR_3 GRAMMAR(NO_EE, NO_XSI_TYPE, 15)
#define GRAMMAR_4 GRAMMAR(NO_EE, NO_XSI_TYPE, 16)
#define GRAMMAR_5 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_6 GRAMMAR(NO_EE, NO_XSI_TYPE, 17)
#define GRAMMAR_7 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_8 GRAMMAR(NO_EE, NO_XSI_TYPE, 18)
#define GRAMMAR_9 GRAMMAR(NO_EE, NO_XSI_TYPE, 19)
#define GRAMMAR_10 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_11 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_12 GRAMMAR(NO_EE, NO_XSI_TYPE, 23)
#define GRAMMAR_13 GRAMMAR(NO_EE, NO_XSI_TYPE, 24)
#define GRAMMAR_14 GRAMMAR(NO_EE, NO_XSI_TYPE, 25)
#define GRAMMAR_15 GRAMMAR(NO_EE, NO_XSI_TYPE, 26)
#define GRAMMAR_16 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_17 GRAMMAR(NO_EE, NO_XSI_TYPE, 27)
#define GRAMMAR_18 GRAMMAR(NO_EE, NO_XSI_TYPE, 28)
#define GRAMMAR_19 GRAMMAR(EE, NO_XSI_TYPE, 29)
#define GRAMMAR_20 GRAMMAR(NO_EE, NO_XSI_TYPE, 43)
#define GRAMMAR_21 GRAMMAR(NO_EE, NO_XSI_TYPE, 44)
#define GRAMMAR_22 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_23 GRAMMAR(NO_EE, NO_XSI_TYPE, 48)
#define GRAMMAR_24 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_25 GRAMMAR(NO_EE, NO_XSI_TYPE, 50)
#define GRAMMAR_26 GRAMMAR(NO_EE, NO_XSI_TYPE, 43)
#define GRAMMAR_27 GRAMMAR(NO_EE, NO_XSI_TYPE, 53)
#define GRAMMAR_28 GRAMMAR(NO_EE, NO_XSI_TYPE, 54)
#define GRAMMAR_29 GRAMMAR(NO_EE, NO_XSI_TYPE, 67)
#define GRAMMAR_30 GRAMMAR(NO_EE, NO_XSI_TYPE, 68)
#define GRAMMAR_31 GRAMMAR(NO_EE, XSI_TYPE, 69)
#define GRAMMAR_32 GRAMMAR(NO_EE, NO_XSI_TYPE, 74)
#define GRAMMAR_33 GRAMMAR(NO_EE, NO_XSI_TYPE, 75)
#define GRAMMAR_34 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_35 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_36 GRAMMAR(NO_EE, NO_XSI_TYPE, 76)
#define GRAMMAR_37 GRAMMAR(NO_EE, NO_XSI_TYPE, 77)
#define GRAMMAR_38 GRAMMAR(EE, XSI_TYPE, 78)
#define GRAMMAR_39 GRAMMAR(NO_EE, NO_XSI_TYPE, 89)
#define GRAMMAR_40 GRAMMAR(NO_EE, NO_XSI_TYPE, 90)
#define GRAMMAR_41 GRAMMAR(NO_EE, XSI_TYPE, 91)
#define GRAMMAR_42 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_43 GRAMMAR(NO_EE, XSI_TYPE, 22)
#define GRAMMAR_44 GRAMMAR(NO_EE, XSI_TYPE, 93)
#define GRAMMAR_45 GRAMMAR(NO_EE, XSI_TYPE, 94)
#define GRAMMAR_46 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_47 GRAMMAR(NO_EE, NO_XSI_TYPE, 95)
#define GRAMMAR_48 GRAMMAR(NO_EE, NO_XSI_TYPE, 96)
#define GRAMMAR_49 GRAMMAR(NO_EE, NO_XSI_TYPE, 97)
#define GRAMMAR_50 GRAMMAR(NO_EE, NO_XSI_TYPE, 100)
#define GRAMMAR_51 GRAMMAR(NO_EE, NO_XSI_TYPE, 101)
#define GRAMMAR_52 GRAMMAR(NO_EE, NO_XSI_TYPE, 102)
#define GRAMMAR_53 GRAMMAR(NO_EE, XSI_TYPE, 104)
#define GRAMMAR_54 GRAMMAR(NO_EE, NO_XSI_TYPE, 106)
#define GRAMMAR_55 GRAMMAR(NO_EE, NO_XSI_TYPE, 107)
#define GRAMMAR_56 GRAMMAR(NO_EE, NO_XSI_TYPE, 108)
#define GRAMMAR_57 GRAMMAR(NO_EE, NO_XSI_TYPE, 109)
#define GRAMMAR_58 GRAMMAR(EE, NO_XSI_TYPE, 111)
#define GRAMMAR_59 GRAMMAR(NO_EE, NO_XSI_TYPE, 114)
#define GRAMMAR_60 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_61 GRAMMAR(EE, NO_XSI_TYPE, 115)
#define GRAMMAR_62 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_63 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_64 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_65 GRAMMAR(NO_EE, NO_XSI_TYPE, 117)
#define GRAMMAR_66 GRAMMAR(NO_EE, NO_XSI_TYPE, 118)
#define GRAMMAR_67 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_68 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_69 GRAMMAR(NO_EE, NO_XSI_TYPE, 119)
#define GRAMMAR_70 GRAMMAR(EE, NO_XSI_TYPE, 120)
#define GRAMMAR_71 GRAMMAR(EE, XSI_TYPE, 128)
#define GRAMMAR_72 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_73 GRAMMAR(NO_EE, NO_XSI_TYPE, 134)
#define GRAMMAR_74 GRAMMAR(NO_EE, NO_XSI_TYPE, 135)
#define GRAMMAR_75 GRAMMAR(NO_EE, NO_XSI_TYPE, 136)
#define GRAMMAR_76 GRAMMAR(NO_EE, XSI_TYPE, 138)
#define GRAMMAR_77 GRAMMAR(NO_EE, NO_XSI_TYPE, 140)
#define GRAMMAR_78 GRAMMAR(NO_EE, NO_XSI_TYPE, 141)
#define GRAMMAR_79 GRAMMAR(EE, NO_XSI_TYPE, 142)
#define GRAMMAR_80 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_81 GRAMMAR(NO_EE, NO_XSI_TYPE, 160)
#define GRAMMAR_82 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_83 GRAMMAR(EE, XSI_TYPE, 22)
#define GRAMMAR_84 GRAMMAR(EE, XSI_TYPE, 161)
#define GRAMMAR_85 GRAMMAR(NO_EE, XSI_TYPE, 164)
#define GRAMMAR_86 GRAMMAR(NO_EE, XSI_TYPE, 169)
#define GRAMMAR_87 GRAMMAR(NO_EE, NO_XSI_TYPE, 172)
#define GRAMMAR_88 GRAMMAR(NO_EE, NO_XSI_TYPE, 43)
#define GRAMMAR_89 GRAMMAR(NO_EE, NO_XSI_TYPE, 114)
#define GRAMMAR_90 GRAMMAR(NO_EE, NO_XSI_TYPE, 173)
#define GRAMMAR_91 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_92 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_93 GRAMMAR(EE, NO_XSI_TYPE, 186)
#define GRAMMAR_94 GRAMMAR(NO_EE, XSI_TYPE, 188)
#define GRAMMAR_95 GRAMMAR(NO_EE, XSI_TYPE, 191)
#define GRAMMAR_96 GRAMMAR(EE, XSI_TYPE, 192)
#define GRAMMAR_97 GRAMMAR(NO_EE, NO_XSI_TYPE, 194)
#define GRAMMAR_98 GRAMMAR(NO_EE, XSI_TYPE, 196)
#define GRAMMAR_99 GRAMMAR(NO_EE, NO_XSI_TYPE, 198)
#define GRAMMAR_100 GRAMMAR(NO_EE, NO_XSI_TYPE, 199)
#define GRAMMAR_101 GRAMMAR(NO_EE, NO_XSI_TYPE, 200)
#define GRAMMAR_102 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_103 GRAMMAR(NO_EE, NO_XSI_TYPE, 201)
#define GRAMMAR_104 GRAMMAR(NO_EE, NO_XSI_TYPE, 202)
#define GRAMMAR_105 GRAMMAR(NO_EE, NO_XSI_TYPE, 203)
#define GRAMMAR_106 GRAMMAR(NO_EE, NO_XSI_TYPE, 208)
#define GRAMMAR_107 GRAMMAR(NO_EE, NO_XSI_TYPE, 209)
#define GRAMMAR_108 GRAMMAR(NO_EE, NO_XSI_TYPE, 210)
#define GRAMMAR_109 GRAMMAR(NO_EE, NO_XSI_TYPE, 213)
#define GRAMMAR_110 GRAMMAR(NO_EE, NO_XSI_TYPE, 215)
#define GRAMMAR_111 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_112 GRAMMAR(NO_EE, NO_XSI_TYPE, 216)
#define GRAMMAR_113 GRAMMAR(NO_EE, NO_XSI_TYPE, 216)
#define GRAMMAR_114 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_115 GRAMMAR(NO_EE, NO_XSI_TYPE, 217)
#define GRAMMAR_116 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_117 GRAMMAR(NO_EE, NO_XSI_TYPE, 218)
#define GRAMMAR_118 GRAMMAR(NO_EE, XSI_TYPE, 220)
#define GRAMMAR_119 GRAMMAR(NO_EE, NO_XSI_TYPE, 222)
#define GRAMMAR_120 GRAMMAR(NO_EE, NO_XSI_TYPE, 223)
#define GRAMMAR_121 GRAMMAR(NO_EE, NO_XSI_TYPE, 114)
#define GRAMMAR_122 GRAMMAR(NO_EE, NO_XSI_TYPE, 43)
#define GRAMMAR_123 GRAMMAR(NO_EE, NO_XSI_TYPE, 1)
#define GRAMMAR_124 GRAMMAR(NO_EE, NO_XSI_TYPE, 2)
#define GRAMMAR_125 GRAMMAR(NO_EE, NO_XSI_TYPE, 3)
#define GRAMMAR_126 GRAMMAR(NO_EE, NO_XSI_TYPE, 4)
#define GRAMMAR_127 GRAMMAR(NO_EE, NO_XSI_TYPE, 5)
#define GRAMMAR_128 GRAMMAR(NO_EE, NO_XSI_TYPE, 6)
#define GRAMMAR_129 GRAMMAR(NO_EE, NO_XSI_TYPE, 7)
#define GRAMMAR_130 GRAMMAR(NO_EE, NO_XSI_TYPE, 8)
#define GRAMMAR_131 GRAMMAR(NO_EE, NO_XSI_TYPE, 9)
#define GRAMMAR_132 GRAMMAR(NO_EE, NO_XSI_TYPE, 10)
#define GRAMMAR_133 GRAMMAR(NO_EE, NO_XSI_TYPE, 11)
#define GRAMMAR_134 GRAMMAR(NO_EE, NO_XSI_TYPE, 12)
#define GRAMMAR_135 GRAMMAR(EE, NO_XSI_TYPE, 65535)
#define GRAMMAR_136 GRAMMAR(NO_EE, NO_XSI_TYPE, 224)
#define GRAMMAR_137 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_138 GRAMMAR(NO_EE, NO_XSI_TYPE, 225)
#define GRAMMAR_139 GRAMMAR(NO_EE, NO_XSI_TYPE, 226)
#define GRAMMAR_140 GRAMMAR(NO_EE, XSI_TYPE, 13)
#define GRAMMAR_141 GRAMMAR(NO_EE, NO_XSI_TYPE, 20)
#define GRAMMAR_142 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_143 GRAMMAR(NO_EE, NO_XSI_TYPE, 227)
#define GRAMMAR_144 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_145 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_146 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_147 GRAMMAR(NO_EE, NO_XSI_TYPE, 231)
#define GRAMMAR_148 GRAMMAR(NO_EE, NO_XSI_TYPE, 232)
#define GRAMMAR_149 GRAMMAR(NO_EE, XSI_TYPE, 114)
#define GRAMMAR_150 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_151 GRAMMAR(EE, NO_XSI_TYPE, 30)
#define GRAMMAR_152 GRAMMAR(EE, NO_XSI_TYPE, 31)
#define GRAMMAR_153 GRAMMAR(EE, NO_XSI_TYPE, 32)
#define GRAMMAR_154 GRAMMAR(EE, NO_XSI_TYPE, 33)
#define GRAMMAR_155 GRAMMAR(EE, NO_XSI_TYPE, 34)
#define GRAMMAR_156 GRAMMAR(EE, NO_XSI_TYPE, 35)
#define GRAMMAR_157 GRAMMAR(EE, NO_XSI_TYPE, 36)
#define GRAMMAR_158 GRAMMAR(EE, NO_XSI_TYPE, 37)
#define GRAMMAR_159 GRAMMAR(EE, NO_XSI_TYPE, 38)
#define GRAMMAR_160 GRAMMAR(EE, NO_XSI_TYPE, 39)
#define GRAMMAR_161 GRAMMAR(EE, NO_XSI_TYPE, 40)
#define GRAMMAR_162 GRAMMAR(EE, NO_XSI_TYPE, 41)
#define GRAMMAR_163 GRAMMAR(EE, NO_XSI_TYPE, 42)
#define GRAMMAR_164 GRAMMAR(NO_EE, NO_XSI_TYPE, 45)
#define GRAMMAR_165 GRAMMAR(NO_EE, NO_XSI_TYPE, 46)
#define GRAMMAR_166 GRAMMAR(NO_EE, NO_XSI_TYPE, 47)
#define GRAMMAR_167 GRAMMAR(NO_EE, NO_XSI_TYPE, 43)
#define GRAMMAR_168 GRAMMAR(NO_EE, NO_XSI_TYPE, 233)
#define GRAMMAR_169 GRAMMAR(NO_EE, NO_XSI_TYPE, 43)
#define GRAMMAR_170 GRAMMAR(NO_EE, NO_XSI_TYPE, 49)
#define GRAMMAR_171 GRAMMAR(EE, NO_XSI_TYPE, 234)
#define GRAMMAR_172 GRAMMAR(NO_EE, NO_XSI_TYPE, 51)
#define GRAMMAR_173 GRAMMAR(NO_EE, NO_XSI_TYPE, 52)
#define GRAMMAR_174 GRAMMAR(NO_EE, NO_XSI_TYPE, 239)
#define GRAMMAR_175 GRAMMAR(NO_EE, NO_XSI_TYPE, 55)
#define GRAMMAR_176 GRAMMAR(NO_EE, NO_XSI_TYPE, 56)
#define GRAMMAR_177 GRAMMAR(NO_EE, NO_XSI_TYPE, 57)
#define GRAMMAR_178 GRAMMAR(NO_EE, NO_XSI_TYPE, 58)
#define GRAMMAR_179 GRAMMAR(NO_EE, NO_XSI_TYPE, 59)
#define GRAMMAR_180 GRAMMAR(NO_EE, NO_XSI_TYPE, 60)
#define GRAMMAR_181 GRAMMAR(NO_EE, NO_XSI_TYPE, 61)
#define GRAMMAR_182 GRAMMAR(NO_EE, NO_XSI_TYPE, 62)
#define GRAMMAR_183 GRAMMAR(NO_EE, NO_XSI_TYPE, 63)
#define GRAMMAR_184 GRAMMAR(NO_EE, NO_XSI_TYPE, 64)
#define GRAMMAR_185 GRAMMAR(NO_EE, NO_XSI_TYPE, 65)
#define GRAMMAR_186 GRAMMAR(NO_EE, NO_XSI_TYPE, 66)
#define GRAMMAR_187 GRAMMAR(EE, NO_XSI_TYPE, 241)
#define GRAMMAR_188 GRAMMAR(NO_EE, NO_XSI_TYPE, 246)
#define GRAMMAR_189 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_190 GRAMMAR(NO_EE, NO_XSI_TYPE, 70)
#define GRAMMAR_191 GRAMMAR(NO_EE, NO_XSI_TYPE, 71)
#define GRAMMAR_192 GRAMMAR(NO_EE, NO_XSI_TYPE, 72)
#define GRAMMAR_193 GRAMMAR(NO_EE, NO_XSI_TYPE, 73)
#define GRAMMAR_194 GRAMMAR(NO_EE, NO_XSI_TYPE, 248)
#define GRAMMAR_195 GRAMMAR(NO_EE, NO_XSI_TYPE, 251)
#define GRAMMAR_196 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_197 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_198 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_199 GRAMMAR(EE, NO_XSI_TYPE, 79)
#define GRAMMAR_200 GRAMMAR(EE, NO_XSI_TYPE, 80)
#define GRAMMAR_201 GRAMMAR(EE, NO_XSI_TYPE, 81)
#define GRAMMAR_202 GRAMMAR(EE, NO_XSI_TYPE, 82)
#define GRAMMAR_203 GRAMMAR(EE, NO_XSI_TYPE, 83)
#define GRAMMAR_204 GRAMMAR(EE, NO_XSI_TYPE, 84)
#define GRAMMAR_205 GRAMMAR(EE, NO_XSI_TYPE, 85)
#define GRAMMAR_206 GRAMMAR(EE, NO_XSI_TYPE, 86)
#define GRAMMAR_207 GRAMMAR(EE, NO_XSI_TYPE, 87)
#define GRAMMAR_208 GRAMMAR(EE, NO_XSI_TYPE, 88)
#define GRAMMAR_209 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_210 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_211 GRAMMAR(NO_EE, NO_XSI_TYPE, 92)
#define GRAMMAR_212 GRAMMAR(EE, NO_XSI_TYPE, 252)
#define GRAMMAR_213 GRAMMAR(NO_EE, NO_XSI_TYPE, 254)
#define GRAMMAR_214 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_215 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_216 GRAMMAR(NO_EE, NO_XSI_TYPE, 98)
#define GRAMMAR_217 GRAMMAR(NO_EE, NO_XSI_TYPE, 99)
#define GRAMMAR_218 GRAMMAR(NO_EE, NO_XSI_TYPE, 256)
#define GRAMMAR_219 GRAMMAR(NO_EE, NO_XSI_TYPE, 260)
#define GRAMMAR_220 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_221 GRAMMAR(NO_EE, NO_XSI_TYPE, 103)
#define GRAMMAR_222 GRAMMAR(NO_EE, NO_XSI_TYPE, 262)
#define GRAMMAR_223 GRAMMAR(NO_EE, NO_XSI_TYPE, 105)
#define GRAMMAR_224 GRAMMAR(EE, NO_XSI_TYPE, 268)
#define GRAMMAR_225 GRAMMAR(NO_EE, NO_XSI_TYPE, 270)
#define GRAMMAR_226 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_227 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_228 GRAMMAR(NO_EE, NO_XSI_TYPE, 110)
#define GRAMMAR_229 GRAMMAR(NO_EE, NO_XSI_TYPE, 272)
#define GRAMMAR_230 GRAMMAR(NO_EE, NO_XSI_TYPE, 95)
#define GRAMMAR_231 GRAMMAR(EE, NO_XSI_TYPE, 112)
#define GRAMMAR_232 GRAMMAR(EE, NO_XSI_TYPE, 113)
#define GRAMMAR_233 GRAMMAR(EE, NO_XSI_TYPE, 116)
#define GRAMMAR_234 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_235 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_236 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_237 GRAMMAR(EE, NO_XSI_TYPE, 121)
#define GRAMMAR_238 GRAMMAR(EE, NO_XSI_TYPE, 122)
#define GRAMMAR_239 GRAMMAR(EE, NO_XSI_TYPE, 123)
#define GRAMMAR_240 GRAMMAR(EE, NO_XSI_TYPE, 124)
#define GRAMMAR_241 GRAMMAR(NO_EE, XSI_TYPE, 43)
#define GRAMMAR_242 GRAMMAR(EE, NO_XSI_TYPE, 125)
#define GRAMMAR_243 GRAMMAR(EE, NO_XSI_TYPE, 126)
#define GRAMMAR_244 GRAMMAR(EE, NO_XSI_TYPE, 127)
#define GRAMMAR_245 GRAMMAR(NO_EE, NO_XSI_TYPE, 216)
#define GRAMMAR_246 GRAMMAR(EE, NO_XSI_TYPE, 129)
#define GRAMMAR_247 GRAMMAR(EE, NO_XSI_TYPE, 130)
#define GRAMMAR_248 GRAMMAR(EE, NO_XSI_TYPE, 131)
#define GRAMMAR_249 GRAMMAR(EE, NO_XSI_TYPE, 132)
#define GRAMMAR_250 GRAMMAR(EE, NO_XSI_TYPE, 133)
#define GRAMMAR_251 GRAMMAR(NO_EE, NO_XSI_TYPE, 275)
#define GRAMMAR_252 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_253 GRAMMAR(NO_EE, NO_XSI_TYPE, 137)
#define GRAMMAR_254 GRAMMAR(NO_EE, NO_XSI_TYPE, 277)
#define GRAMMAR_255 GRAMMAR(NO_EE, NO_XSI_TYPE, 139)
#define GRAMMAR_256 GRAMMAR(NO_EE, NO_XSI_TYPE, 280)
#define GRAMMAR_257 GRAMMAR(NO_EE, NO_XSI_TYPE, 283)
#define GRAMMAR_258 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_259 GRAMMAR(EE, NO_XSI_TYPE, 143)
#define GRAMMAR_260 GRAMMAR(EE, NO_XSI_TYPE, 144)
#define GRAMMAR_261 GRAMMAR(EE, NO_XSI_TYPE, 145)
#define GRAMMAR_262 GRAMMAR(EE, NO_XSI_TYPE, 146)
#define GRAMMAR_263 GRAMMAR(EE, NO_XSI_TYPE, 147)
#define GRAMMAR_264 GRAMMAR(EE, NO_XSI_TYPE, 148)
#define GRAMMAR_265 GRAMMAR(EE, NO_XSI_TYPE, 149)
#define GRAMMAR_266 GRAMMAR(EE, NO_XSI_TYPE, 150)
#define GRAMMAR_267 GRAMMAR(EE, NO_XSI_TYPE, 151)
#define GRAMMAR_268 GRAMMAR(EE, NO_XSI_TYPE, 152)
#define GRAMMAR_269 GRAMMAR(EE, NO_XSI_TYPE, 153)
#define GRAMMAR_270 GRAMMAR(EE, NO_XSI_TYPE, 154)
#define GRAMMAR_271 GRAMMAR(EE, NO_XSI_TYPE, 155)
#define GRAMMAR_272 GRAMMAR(EE, NO_XSI_TYPE, 156)
#define GRAMMAR_273 GRAMMAR(EE, NO_XSI_TYPE, 157)
#define GRAMMAR_274 GRAMMAR(EE, NO_XSI_TYPE, 158)
#define GRAMMAR_275 GRAMMAR(NO_EE, NO_XSI_TYPE, 114)
#define GRAMMAR_276 GRAMMAR(EE, NO_XSI_TYPE, 159)
#define GRAMMAR_277 GRAMMAR(NO_EE, NO_XSI_TYPE, 285)
#define GRAMMAR_278 GRAMMAR(NO_EE, NO_XSI_TYPE, 286)
#define GRAMMAR_279 GRAMMAR(EE, NO_XSI_TYPE, 162)
#define GRAMMAR_280 GRAMMAR(EE, NO_XSI_TYPE, 163)
#define GRAMMAR_281 GRAMMAR(NO_EE, NO_XSI_TYPE, 165)
#define GRAMMAR_282 GRAMMAR(NO_EE, NO_XSI_TYPE, 166)
#define GRAMMAR_283 GRAMMAR(NO_EE, NO_XSI_TYPE, 167)
#define GRAMMAR_284 GRAMMAR(NO_EE, NO_XSI_TYPE, 168)
#define GRAMMAR_285 GRAMMAR(EE, NO_XSI_TYPE, 287)
#define GRAMMAR_286 GRAMMAR(NO_EE, NO_XSI_TYPE, 170)
#define GRAMMAR_287 GRAMMAR(NO_EE, NO_XSI_TYPE, 171)
#define GRAMMAR_288 GRAMMAR(NO_EE, NO_XSI_TYPE, 289)
#define GRAMMAR_289 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_290 GRAMMAR(NO_EE, NO_XSI_TYPE, 174)
#define GRAMMAR_291 GRAMMAR(NO_EE, NO_XSI_TYPE, 175)
#define GRAMMAR_292 GRAMMAR(NO_EE, NO_XSI_TYPE, 176)
#define GRAMMAR_293 GRAMMAR(NO_EE, NO_XSI_TYPE, 177)
#define GRAMMAR_294 GRAMMAR(NO_EE, NO_XSI_TYPE, 178)
#define GRAMMAR_295 GRAMMAR(NO_EE, NO_XSI_TYPE, 179)
#define GRAMMAR_296 GRAMMAR(NO_EE, NO_XSI_TYPE, 180)
#define GRAMMAR_297 GRAMMAR(NO_EE, NO_XSI_TYPE, 181)
#define GRAMMAR_298 GRAMMAR(NO_EE, NO_XSI_TYPE, 182)
#define GRAMMAR_299 GRAMMAR(NO_EE, NO_XSI_TYPE, 183)
#define GRAMMAR_300 GRAMMAR(NO_EE, NO_XSI_TYPE, 184)
#define GRAMMAR_301 GRAMMAR(NO_EE, NO_XSI_TYPE, 12)
#define GRAMMAR_302 GRAMMAR(EE, NO_XSI_TYPE, 187)
#define GRAMMAR_303 GRAMMAR(NO_EE, XSI_TYPE, 216)
#define GRAMMAR_304 GRAMMAR(NO_EE, NO_XSI_TYPE, 189)
#define GRAMMAR_305 GRAMMAR(NO_EE, NO_XSI_TYPE, 190)
#define GRAMMAR_306 GRAMMAR(EE, NO_XSI_TYPE, 291)
#define GRAMMAR_307 GRAMMAR(NO_EE, NO_XSI_TYPE, 293)
#define GRAMMAR_308 GRAMMAR(EE, NO_XSI_TYPE, 193)
#define GRAMMAR_309 GRAMMAR(NO_EE, NO_XSI_TYPE, 195)
#define GRAMMAR_310 GRAMMAR(NO_EE, NO_XSI_TYPE, 295)
#define GRAMMAR_311 GRAMMAR(NO_EE, NO_XSI_TYPE, 197)
#define GRAMMAR_312 GRAMMAR(NO_EE, NO_XSI_TYPE, 297)
#define GRAMMAR_313 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_314 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_315 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_316 GRAMMAR(NO_EE, NO_XSI_TYPE, 299)
#define GRAMMAR_317 GRAMMAR(NO_EE, NO_XSI_TYPE, 204)
#define GRAMMAR_318 GRAMMAR(NO_EE, NO_XSI_TYPE, 205)
#define GRAMMAR_319 GRAMMAR(NO_EE, NO_XSI_TYPE, 206)
#define GRAMMAR_320 GRAMMAR(NO_EE, NO_XSI_TYPE, 207)
#define GRAMMAR_321 GRAMMAR(NO_EE, NO_XSI_TYPE, 300)
#define GRAMMAR_322 GRAMMAR(NO_EE, NO_XSI_TYPE, 303)
#define GRAMMAR_323 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_324 GRAMMAR(NO_EE, NO_XSI_TYPE, 211)
#define GRAMMAR_325 GRAMMAR(NO_EE, NO_XSI_TYPE, 212)
#define GRAMMAR_326 GRAMMAR(NO_EE, NO_XSI_TYPE, 305)
#define GRAMMAR_327 GRAMMAR(NO_EE, NO_XSI_TYPE, 214)
#define GRAMMAR_328 GRAMMAR(NO_EE, NO_XSI_TYPE, 307)
#define GRAMMAR_329 GRAMMAR(NO_EE, NO_XSI_TYPE, 308)
#define GRAMMAR_330 GRAMMAR(NO_EE, NO_XSI_TYPE, 309)
#define GRAMMAR_331 GRAMMAR(NO_EE, NO_XSI_TYPE, 219)
#define GRAMMAR_332 GRAMMAR(NO_EE, NO_XSI_TYPE, 310)
#define GRAMMAR_333 GRAMMAR(NO_EE, NO_XSI_TYPE, 221)
#define GRAMMAR_334 GRAMMAR(NO_EE, NO_XSI_TYPE, 313)
#define GRAMMAR_335 GRAMMAR(NO_EE, NO_XSI_TYPE, 316)
#define GRAMMAR_336 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_337 GRAMMAR(NO_EE, XSI_TYPE, 114)
#define GRAMMAR_338 GRAMMAR(NO_EE, NO_XSI_TYPE, 318)
#define GRAMMAR_339 GRAMMAR(NO_EE, NO_XSI_TYPE, 228)
#define GRAMMAR_340 GRAMMAR(NO_EE, NO_XSI_TYPE, 229)
#define GRAMMAR_341 GRAMMAR(NO_EE, NO_XSI_TYPE, 230)
#define GRAMMAR_342 GRAMMAR(NO_EE, NO_XSI_TYPE, 95)
#define GRAMMAR_343 GRAMMAR(NO_EE, NO_XSI_TYPE, 319)
#define GRAMMAR_344 GRAMMAR(NO_EE, NO_XSI_TYPE, 320)
#define GRAMMAR_345 GRAMMAR(EE, NO_XSI_TYPE, 235)
#define GRAMMAR_346 GRAMMAR(EE, NO_XSI_TYPE, 236)
#define GRAMMAR_347 GRAMMAR(EE, NO_XSI_TYPE, 237)
#define GRAMMAR_348 GRAMMAR(EE, NO_XSI_TYPE, 237)
#define GRAMMAR_349 GRAMMAR(NO_EE, NO_XSI_TYPE, 240)
#define GRAMMAR_350 GRAMMAR(EE, NO_XSI_TYPE, 321)
#define GRAMMAR_351 GRAMMAR(EE, NO_XSI_TYPE, 242)
#define GRAMMAR_352 GRAMMAR(EE, NO_XSI_TYPE, 243)
#define GRAMMAR_353 GRAMMAR(EE, NO_XSI_TYPE, 244)
#define GRAMMAR_354 GRAMMAR(EE, NO_XSI_TYPE, 245)
#define GRAMMAR_355 GRAMMAR(NO_EE, NO_XSI_TYPE, 247)
#define GRAMMAR_356 GRAMMAR(EE, NO_XSI_TYPE, 327)
#define GRAMMAR_357 GRAMMAR(NO_EE, NO_XSI_TYPE, 249)
#define GRAMMAR_358 GRAMMAR(NO_EE, NO_XSI_TYPE, 250)
#define GRAMMAR_359 GRAMMAR(NO_EE, NO_XSI_TYPE, 329)
#define GRAMMAR_360 GRAMMAR(NO_EE, NO_XSI_TYPE, 330)
#define GRAMMAR_361 GRAMMAR(EE, NO_XSI_TYPE, 253)
#define GRAMMAR_362 GRAMMAR(NO_EE, NO_XSI_TYPE, 255)
#define GRAMMAR_363 GRAMMAR(NO_EE, NO_XSI_TYPE, 257)
#define GRAMMAR_364 GRAMMAR(NO_EE, NO_XSI_TYPE, 258)
#define GRAMMAR_365 GRAMMAR(NO_EE, NO_XSI_TYPE, 259)
#define GRAMMAR_366 GRAMMAR(NO_EE, NO_XSI_TYPE, 331)
#define GRAMMAR_367 GRAMMAR(NO_EE, NO_XSI_TYPE, 261)
#define GRAMMAR_368 GRAMMAR(EE, NO_XSI_TYPE, 332)
#define GRAMMAR_369 GRAMMAR(NO_EE, NO_XSI_TYPE, 263)
#define GRAMMAR_370 GRAMMAR(NO_EE, NO_XSI_TYPE, 264)
#define GRAMMAR_371 GRAMMAR(NO_EE, NO_XSI_TYPE, 265)
#define GRAMMAR_372 GRAMMAR(NO_EE, NO_XSI_TYPE, 266)
#define GRAMMAR_373 GRAMMAR(NO_EE, NO_XSI_TYPE, 267)
#define GRAMMAR_374 GRAMMAR(EE, NO_XSI_TYPE, 253)
#define GRAMMAR_375 GRAMMAR(NO_EE, NO_XSI_TYPE, 271)
#define GRAMMAR_376 GRAMMAR(EE, NO_XSI_TYPE, 334)
#define GRAMMAR_377 GRAMMAR(NO_EE, NO_XSI_TYPE, 273)
#define GRAMMAR_378 GRAMMAR(NO_EE, NO_XSI_TYPE, 274)
#define GRAMMAR_379 GRAMMAR(NO_EE, NO_XSI_TYPE, 336)
#define GRAMMAR_380 GRAMMAR(NO_EE, NO_XSI_TYPE, 276)
#define GRAMMAR_381 GRAMMAR(EE, NO_XSI_TYPE, 337)
#define GRAMMAR_382 GRAMMAR(NO_EE, NO_XSI_TYPE, 278)
#define GRAMMAR_383 GRAMMAR(NO_EE, NO_XSI_TYPE, 279)
#define GRAMMAR_384 GRAMMAR(EE, NO_XSI_TYPE, 339)
#define GRAMMAR_385 GRAMMAR(NO_EE, NO_XSI_TYPE, 281)
#define GRAMMAR_386 GRAMMAR(NO_EE, NO_XSI_TYPE, 282)
#define GRAMMAR_387 GRAMMAR(NO_EE, NO_XSI_TYPE, 284)
#define GRAMMAR_388 GRAMMAR(EE, NO_XSI_TYPE, 340)
#define GRAMMAR_389 GRAMMAR(EE, NO_XSI_TYPE, 253)
#define GRAMMAR_390 GRAMMAR(NO_EE, NO_XSI_TYPE, 290)
#define GRAMMAR_391 GRAMMAR(EE, NO_XSI_TYPE, 253)
#define GRAMMAR_392 GRAMMAR(NO_EE, NO_XSI_TYPE, 294)
#define GRAMMAR_393 GRAMMAR(EE, NO_XSI_TYPE, 193)
#define GRAMMAR_394 GRAMMAR(NO_EE, NO_XSI_TYPE, 296)
#define GRAMMAR_395 GRAMMAR(NO_EE, NO_XSI_TYPE, 342)
#define GRAMMAR_396 GRAMMAR(NO_EE, NO_XSI_TYPE, 298)
#define GRAMMAR_397 GRAMMAR(EE, NO_XSI_TYPE, 343)
#define GRAMMAR_398 GRAMMAR(NO_EE, NO_XSI_TYPE, 224)
#define GRAMMAR_399 GRAMMAR(NO_EE, NO_XSI_TYPE, 301)
#define GRAMMAR_400 GRAMMAR(NO_EE, NO_XSI_TYPE, 302)
#define GRAMMAR_401 GRAMMAR(NO_EE, NO_XSI_TYPE, 344)
#define GRAMMAR_402 GRAMMAR(NO_EE, NO_XSI_TYPE, 304)
#define GRAMMAR_403 GRAMMAR(EE, NO_XSI_TYPE, 345)
#define GRAMMAR_404 GRAMMAR(NO_EE, NO_XSI_TYPE, 290)
#define GRAMMAR_405 GRAMMAR(NO_EE, NO_XSI_TYPE, 347)
#define GRAMMAR_406 GRAMMAR(NO_EE, NO_XSI_TYPE, 348)
#define GRAMMAR_407 GRAMMAR(NO_EE, NO_XSI_TYPE, 349)
#define GRAMMAR_408 GRAMMAR(NO_EE, NO_XSI_TYPE, 311)
#define GRAMMAR_409 GRAMMAR(NO_EE, NO_XSI_TYPE, 312)
#define GRAMMAR_410 GRAMMAR(NO_EE, NO_XSI_TYPE, 350)
#define GRAMMAR_411 GRAMMAR(NO_EE, NO_XSI_TYPE, 314)
#define GRAMMAR_412 GRAMMAR(NO_EE, NO_XSI_TYPE, 315)
#define GRAMMAR_413 GRAMMAR(NO_EE, NO_XSI_TYPE, 351)
#define GRAMMAR_414 GRAMMAR(NO_EE, NO_XSI_TYPE, 317)
#define GRAMMAR_415 GRAMMAR(EE, NO_XSI_TYPE, 352)
#define GRAMMAR_416 GRAMMAR(NO_EE, XSI_TYPE, 43)
#define GRAMMAR_417 GRAMMAR(NO_EE, NO_XSI_TYPE, 354)
#define GRAMMAR_418 GRAMMAR(EE, NO_XSI_TYPE, 322)
#define GRAMMAR_419 GRAMMAR(EE, NO_XSI_TYPE, 323)
#define GRAMMAR_420 GRAMMAR(EE, NO_XSI_TYPE, 324)
#define GRAMMAR_421 GRAMMAR(EE, NO_XSI_TYPE, 325)
#define GRAMMAR_422 GRAMMAR(EE, NO_XSI_TYPE, 326)
#define GRAMMAR_423 GRAMMAR(EE, NO_XSI_TYPE, 328)
#define GRAMMAR_424 GRAMMAR(EE, NO_XSI_TYPE, 328)
#define GRAMMAR_425 GRAMMAR(NO_EE, NO_XSI_TYPE, 355)
#define GRAMMAR_426 GRAMMAR(EE, NO_XSI_TYPE, 356)
#define GRAMMAR_427 GRAMMAR(EE, NO_XSI_TYPE, 358)
#define GRAMMAR_428 GRAMMAR(EE, NO_XSI_TYPE, 333)
#define GRAMMAR_429 GRAMMAR(EE, NO_XSI_TYPE, 333)
#define GRAMMAR_430 GRAMMAR(EE, NO_XSI_TYPE, 335)
#define GRAMMAR_431 GRAMMAR(EE, NO_XSI_TYPE, 335)
#define GRAMMAR_432 GRAMMAR(EE, NO_XSI_TYPE, 338)
#define GRAMMAR_433 GRAMMAR(EE, NO_XSI_TYPE, 338)
#define GRAMMAR_434 GRAMMAR(EE, NO_XSI_TYPE, 341)
#define GRAMMAR_435 GRAMMAR(EE, NO_XSI_TYPE, 341)
#define GRAMMAR_436 GRAMMAR(NO_EE, NO_XSI_TYPE, 359)
#define GRAMMAR_437 GRAMMAR(NO_EE, NO_XSI_TYPE, 95)
#define GRAMMAR_438 GRAMMAR(EE, NO_XSI_TYPE, 343)
#define GRAMMAR_439 GRAMMAR(NO_EE, NO_XSI_TYPE, 360)
#define GRAMMAR_440 GRAMMAR(EE, NO_XSI_TYPE, 346)
#define GRAMMAR_441 GRAMMAR(EE, NO_XSI_TYPE, 346)
#define GRAMMAR_442 GRAMMAR(NO_EE, NO_XSI_TYPE, 361)
#define GRAMMAR_443 GRAMMAR(NO_EE, NO_XSI_TYPE, 362)
#define GRAMMAR_444 GRAMMAR(NO_EE, XSI_TYPE, 216)
#define GRAMMAR_445 GRAMMAR(NO_EE, NO_XSI_TYPE, 363)
#define GRAMMAR_446 GRAMMAR(NO_EE, NO_XSI_TYPE, 364)
#define GRAMMAR_447 GRAMMAR(EE, NO_XSI_TYPE, 353)
#define GRAMMAR_448 GRAMMAR(EE, NO_XSI_TYPE, 353)
#define GRAMMAR_449 GRAMMAR(NO_EE, NO_XSI_TYPE, 365)
#define GRAMMAR_450 GRAMMAR(EE, NO_XSI_TYPE, 357)
#define GRAMMAR_451 GRAMMAR(NO_EE, NO_XSI_TYPE, 95)
#define GRAMMAR_452 GRAMMAR(NO_EE, NO_XSI_TYPE, 367)
#define GRAMMAR_453 GRAMMAR(NO_EE, NO_XSI_TYPE, 368)
#define GRAMMAR_454 GRAMMAR(NO_EE, NO_XSI_TYPE, 370)
#define GRAMMAR_455 GRAMMAR(EE, NO_XSI_TYPE, 372)
#define GRAMMAR_456 GRAMMAR(NO_EE, NO_XSI_TYPE, 366)
#define GRAMMAR_457 GRAMMAR(NO_EE, NO_XSI_TYPE, 373)
#define GRAMMAR_458 GRAMMAR(NO_EE, NO_XSI_TYPE, 369)
#define GRAMMAR_459 GRAMMAR(NO_EE, NO_XSI_TYPE, 95)
#define GRAMMAR_460 GRAMMAR(NO_EE, NO_XSI_TYPE, 374)
#define GRAMMAR_461 GRAMMAR(NO_EE, NO_XSI_TYPE, 371)
#define GRAMMAR_462 GRAMMAR(NO_EE, NO_XSI_TYPE, 362)
#define GRAMMAR_463 GRAMMAR(NO_EE, NO_XSI_TYPE, 375)
#define GRAMMAR_464 GRAMMAR(NO_EE, XSI_TYPE, 95)
#define GRAMMAR_465 GRAMMAR(NO_EE, NO_XSI_TYPE, 376)
#define GRAMMAR_466 GRAMMAR(NO_EE, NO_XSI_TYPE, 377)
#define GRAMMAR_467 GRAMMAR(NO_EE, NO_XSI_TYPE, 378)
#define GRAMMAR_468 GRAMMAR(NO_EE, NO_XSI_TYPE, 379)

static EmberExiGrammarProduction productions[] = {
// Production count: 380
  RULE(AT, STRING, href, 0, GRAMMAR_123), // 0
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_124, 8), // 1
  SE_RULE(ConfigurationLink, 0, GRAMMAR_125, GRAMMAR_10), // 2
  SE_RULE(DERListLink, 0, GRAMMAR_126, GRAMMAR_13), // 3
  SE_RULE(DeviceInformationLink, 0, GRAMMAR_127, GRAMMAR_22), // 4
  SE_RULE(DeviceStatusLink, 0, GRAMMAR_128, GRAMMAR_24), // 5
  SE_RULE(FileStatusLink, 0, GRAMMAR_129, GRAMMAR_34), // 6
  SE_RULE(IPInterfaceListLink, 0, GRAMMAR_130, GRAMMAR_40), // 7
  SE_RULE(LoadShedAvailabilityLink, 0, GRAMMAR_131, GRAMMAR_46), // 8
  SE_RULE(loadShedDeviceCategory, 0, GRAMMAR_132, GRAMMAR_20), // 9
  SE_RULE(LogEventListLink, 0, GRAMMAR_133, GRAMMAR_48), // 10
  SE_RULE(PowerStatusLink, 0, GRAMMAR_134, GRAMMAR_64), // 11
  SE_RULE(sFDI, 1, GRAMMAR_135, GRAMMAR_89), // 12
  NBIT_RULE(CH, NONE, 1, GRAMMAR_135, 8), // 13
  SE_RULE(multiplier, 1, GRAMMAR_136, GRAMMAR_62), // 14
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_137), // 15
  SE_RULE(type, 1, GRAMMAR_135, GRAMMAR_5), // 16
  SE_RULE(type, 1, GRAMMAR_138, GRAMMAR_114), // 17
  SE_RULE(attributeIdentifier, 1, GRAMMAR_139, GRAMMAR_140), // 18
  RULE(AT, STRING, href, 0, GRAMMAR_141), // 19
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_142, 8), // 20
  SE_RULE(currentLocale, 1, GRAMMAR_143, GRAMMAR_47), // 21
  RULE(AT, STRING, href, 1, GRAMMAR_135), // 22
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_144), // 23
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_145), // 24
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_146), // 25
  SE_RULE(averageEnergy, 1, GRAMMAR_147, GRAMMAR_81), // 26
  SE_RULE(duration, 1, GRAMMAR_148, GRAMMAR_149), // 27
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_150), // 28
  RULE(AT, STRING, href, 0, GRAMMAR_151), // 29
  SE_RULE(CustomerAccountListLink, 0, GRAMMAR_152, GRAMMAR_12), // 30
  SE_RULE(DemandResponseProgramListLink, 0, GRAMMAR_153, GRAMMAR_18), // 31
  SE_RULE(DERProgramListLink, 0, GRAMMAR_154, GRAMMAR_14), // 32
  SE_RULE(FileListLink, 0, GRAMMAR_155, GRAMMAR_33), // 33
  SE_RULE(MessagingProgramListLink, 0, GRAMMAR_156, GRAMMAR_51), // 34
  SE_RULE(PrepaymentListLink, 0, GRAMMAR_157, GRAMMAR_65), // 35
  SE_RULE(ResponseSetListLink, 0, GRAMMAR_158, GRAMMAR_87), // 36
  SE_RULE(TariffProfileListLink, 0, GRAMMAR_159, GRAMMAR_103), // 37
  SE_RULE(TimeLink, 0, GRAMMAR_160, GRAMMAR_111), // 38
  SE_RULE(UsagePointListLink, 0, GRAMMAR_161, GRAMMAR_120), // 39
  SE_RULE(EndDeviceListLink, 0, GRAMMAR_162, GRAMMAR_30), // 40
  SE_RULE(MirrorUsagePointListLink, 0, GRAMMAR_163, GRAMMAR_56), // 41
  SE_RULE(SelfDeviceLink, 1, GRAMMAR_135, GRAMMAR_91), // 42
  RULE(CH, BINARY, NONE, 1, GRAMMAR_135), // 43
  RULE(AT, STRING, href, 0, GRAMMAR_164), // 44
  SE_RULE(DRLCCapabilities, 0, GRAMMAR_165, GRAMMAR_15), // 45
  SE_RULE(functionsImplemented, 0, GRAMMAR_166, GRAMMAR_167), // 46
  SE_RULE(lFDI, 1, GRAMMAR_168, GRAMMAR_169), // 47
  RULE(AT, STRING, href, 0, GRAMMAR_170), // 48
  SE_RULE(changedTime, 1, GRAMMAR_171, GRAMMAR_113), // 49
  RULE(AT, STRING, href, 0, GRAMMAR_172), // 50
  SE_RULE(createdDateTime, 0, GRAMMAR_173, GRAMMAR_113), // 51
  SE_RULE(endDeviceLFDI, 1, GRAMMAR_174, GRAMMAR_169), // 52
  SE_RULE(normalValue, 1, GRAMMAR_135, GRAMMAR_140), // 53
  RULE(AT, STRING, href, 0, GRAMMAR_175), // 54
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_176, 8), // 55
  SE_RULE(ConfigurationLink, 0, GRAMMAR_177, GRAMMAR_10), // 56
  SE_RULE(DERListLink, 0, GRAMMAR_178, GRAMMAR_13), // 57
  SE_RULE(DeviceInformationLink, 0, GRAMMAR_179, GRAMMAR_22), // 58
  SE_RULE(DeviceStatusLink, 0, GRAMMAR_180, GRAMMAR_24), // 59
  SE_RULE(FileStatusLink, 0, GRAMMAR_181, GRAMMAR_34), // 60
  SE_RULE(IPInterfaceListLink, 0, GRAMMAR_182, GRAMMAR_40), // 61
  SE_RULE(LoadShedAvailabilityLink, 0, GRAMMAR_183, GRAMMAR_46), // 62
  SE_RULE(loadShedDeviceCategory, 0, GRAMMAR_184, GRAMMAR_20), // 63
  SE_RULE(LogEventListLink, 0, GRAMMAR_185, GRAMMAR_48), // 64
  SE_RULE(PowerStatusLink, 0, GRAMMAR_186, GRAMMAR_64), // 65
  SE_RULE(sFDI, 1, GRAMMAR_187, GRAMMAR_89), // 66
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_188), // 67
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_189), // 68
  RULE(AT, STRING, href, 0, GRAMMAR_190), // 69
  RULE(AT, STRING, replyTo, 0, GRAMMAR_191), // 70
  RULE(AT, BINARY, responseRequired, 0, GRAMMAR_192), // 71
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_193, 8), // 72
  SE_RULE(mRID, 1, GRAMMAR_194, GRAMMAR_122), // 73
  SE_RULE(currentStatus, 1, GRAMMAR_195, GRAMMAR_140), // 74
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_196), // 75
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_197), // 76
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_198), // 77
  RULE(AT, STRING, href, 0, GRAMMAR_199), // 78
  SE_RULE(CustomerAccountListLink, 0, GRAMMAR_200, GRAMMAR_12), // 79
  SE_RULE(DemandResponseProgramListLink, 0, GRAMMAR_201, GRAMMAR_18), // 80
  SE_RULE(DERProgramListLink, 0, GRAMMAR_202, GRAMMAR_14), // 81
  SE_RULE(FileListLink, 0, GRAMMAR_203, GRAMMAR_33), // 82
  SE_RULE(MessagingProgramListLink, 0, GRAMMAR_204, GRAMMAR_51), // 83
  SE_RULE(PrepaymentListLink, 0, GRAMMAR_205, GRAMMAR_65), // 84
  SE_RULE(ResponseSetListLink, 0, GRAMMAR_206, GRAMMAR_87), // 85
  SE_RULE(TariffProfileListLink, 0, GRAMMAR_207, GRAMMAR_103), // 86
  SE_RULE(TimeLink, 0, GRAMMAR_208, GRAMMAR_111), // 87
  SE_RULE(UsagePointListLink, 1, GRAMMAR_135, GRAMMAR_120), // 88
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_209), // 89
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_210), // 90
  RULE(AT, STRING, href, 0, GRAMMAR_211), // 91
  SE_RULE(mRID, 1, GRAMMAR_212, GRAMMAR_122), // 92
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_213), // 93
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_214), // 94
  RULE(CH, STRING, NONE, 1, GRAMMAR_135), // 95
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_215), // 96
  RULE(AT, STRING, href, 0, GRAMMAR_216), // 97
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_217, 8), // 98
  SE_RULE(mRID, 1, GRAMMAR_218, GRAMMAR_122), // 99
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_219), // 100
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_220), // 101
  RULE(AT, STRING, href, 0, GRAMMAR_221), // 102
  SE_RULE(mRID, 1, GRAMMAR_222, GRAMMAR_122), // 103
  RULE(AT, STRING, href, 0, GRAMMAR_223), // 104
  SE_RULE(mRID, 1, GRAMMAR_224, GRAMMAR_122), // 105
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_225), // 106
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_226), // 107
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_227), // 108
  RULE(AT, STRING, href, 0, GRAMMAR_228), // 109
  SE_RULE(subscribedResource, 1, GRAMMAR_229, GRAMMAR_230), // 110
  SE_RULE(coolingOffset, 0, GRAMMAR_231, GRAMMAR_140), // 111
  SE_RULE(heatingOffset, 0, GRAMMAR_232, GRAMMAR_140), // 112
  SE_RULE(loadAdjustmentPercentageOffset, 1, GRAMMAR_135, GRAMMAR_140), // 113
  RULE(CH, UNSIGNED_INTEGER, NONE, 1, GRAMMAR_135), // 114
  SE_RULE(batteryInstallTime, 0, GRAMMAR_233, GRAMMAR_113), // 115
  SE_RULE(lowChargeThreshold, 1, GRAMMAR_135, GRAMMAR_149), // 116
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_234), // 117
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_235), // 118
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_236), // 119
  RULE(AT, STRING, href, 0, GRAMMAR_237), // 120
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_238, 8), // 121
  SE_RULE(consumptionBlock, 0, GRAMMAR_239, GRAMMAR_11), // 122
  SE_RULE(qualityFlags, 0, GRAMMAR_240, GRAMMAR_241), // 123
  SE_RULE(timePeriod, 0, GRAMMAR_242, GRAMMAR_17), // 124
  SE_RULE(touTier, 0, GRAMMAR_243, GRAMMAR_102), // 125
  SE_RULE(value, 0, GRAMMAR_244, GRAMMAR_245), // 126
  SE_RULE(localID, 1, GRAMMAR_135, GRAMMAR_241), // 127
  RULE(AT, STRING, href, 0, GRAMMAR_246), // 128
  SE_RULE(consumptionBlock, 0, GRAMMAR_247, GRAMMAR_11), // 129
  SE_RULE(qualityFlags, 0, GRAMMAR_248, GRAMMAR_241), // 130
  SE_RULE(timePeriod, 0, GRAMMAR_249, GRAMMAR_17), // 131
  SE_RULE(touTier, 0, GRAMMAR_250, GRAMMAR_102), // 132
  SE_RULE(value, 1, GRAMMAR_135, GRAMMAR_245), // 133
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_251), // 134
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_252), // 135
  RULE(AT, STRING, href, 0, GRAMMAR_253), // 136
  SE_RULE(mRID, 1, GRAMMAR_254, GRAMMAR_122), // 137
  RULE(AT, STRING, href, 0, GRAMMAR_255), // 138
  SE_RULE(mRID, 1, GRAMMAR_256, GRAMMAR_122), // 139
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_257), // 140
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_258), // 141
  RULE(AT, STRING, href, 0, GRAMMAR_259), // 142
  SE_RULE(accumulationBehaviour, 0, GRAMMAR_260, GRAMMAR_1), // 143
  SE_RULE(calorificValue, 0, GRAMMAR_261, GRAMMAR_115), // 144
  SE_RULE(commodity, 0, GRAMMAR_262, GRAMMAR_7), // 145
  SE_RULE(conversionFactor, 0, GRAMMAR_263, GRAMMAR_115), // 146
  SE_RULE(dataQualifier, 0, GRAMMAR_264, GRAMMAR_16), // 147
  SE_RULE(flowDirection, 0, GRAMMAR_265, GRAMMAR_35), // 148
  SE_RULE(intervalLength, 0, GRAMMAR_266, GRAMMAR_149), // 149
  SE_RULE(kind, 0, GRAMMAR_267, GRAMMAR_42), // 150
  SE_RULE(maxNumberOfIntervals, 0, GRAMMAR_268, GRAMMAR_140), // 151
  SE_RULE(numberOfConsumptionBlocks, 0, GRAMMAR_269, GRAMMAR_140), // 152
  SE_RULE(numberOfTouTiers, 0, GRAMMAR_270, GRAMMAR_140), // 153
  SE_RULE(phase, 0, GRAMMAR_271, GRAMMAR_60), // 154
  SE_RULE(powerOfTenMultiplier, 0, GRAMMAR_272, GRAMMAR_62), // 155
  SE_RULE(subIntervalLength, 0, GRAMMAR_273, GRAMMAR_149), // 156
  SE_RULE(supplyLimit, 0, GRAMMAR_274, GRAMMAR_275), // 157
  SE_RULE(tieredConsumptionBlocks, 0, GRAMMAR_276, GRAMMAR_277), // 158
  SE_RULE(uom, 1, GRAMMAR_135, GRAMMAR_116), // 159
  SE_RULE(multiplier, 1, GRAMMAR_278, GRAMMAR_62), // 160
  RULE(AT, STRING, href, 0, GRAMMAR_279), // 161
  RULE(AT, STRING, replyTo, 0, GRAMMAR_280), // 162
  RULE(AT, BINARY, responseRequired, 1, GRAMMAR_135), // 163
  RULE(AT, STRING, href, 0, GRAMMAR_281), // 164
  RULE(AT, STRING, replyTo, 0, GRAMMAR_282), // 165
  RULE(AT, BINARY, responseRequired, 0, GRAMMAR_283), // 166
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_284, 8), // 167
  SE_RULE(mRID, 1, GRAMMAR_285, GRAMMAR_122), // 168
  RULE(AT, STRING, href, 0, GRAMMAR_286), // 169
  SE_RULE(createdDateTime, 0, GRAMMAR_287, GRAMMAR_113), // 170
  SE_RULE(endDeviceLFDI, 1, GRAMMAR_288, GRAMMAR_169), // 171
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_289), // 172
  RULE(AT, STRING, href, 0, GRAMMAR_290), // 173
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_291, 8), // 174
  SE_RULE(ConfigurationLink, 0, GRAMMAR_292, GRAMMAR_10), // 175
  SE_RULE(DERListLink, 0, GRAMMAR_293, GRAMMAR_13), // 176
  SE_RULE(DeviceInformationLink, 0, GRAMMAR_294, GRAMMAR_22), // 177
  SE_RULE(DeviceStatusLink, 0, GRAMMAR_295, GRAMMAR_24), // 178
  SE_RULE(FileStatusLink, 0, GRAMMAR_296, GRAMMAR_34), // 179
  SE_RULE(IPInterfaceListLink, 0, GRAMMAR_297, GRAMMAR_40), // 180
  SE_RULE(LoadShedAvailabilityLink, 0, GRAMMAR_298, GRAMMAR_46), // 181
  SE_RULE(loadShedDeviceCategory, 0, GRAMMAR_299, GRAMMAR_20), // 182
  SE_RULE(LogEventListLink, 0, GRAMMAR_300, GRAMMAR_48), // 183
  SE_RULE(PowerStatusLink, 0, GRAMMAR_301, GRAMMAR_64), // 184
  SE_RULE(sFDI, 1, GRAMMAR_135, GRAMMAR_89), // 185
  SE_RULE(coolingSetpoint, 0, GRAMMAR_302, GRAMMAR_303), // 186
  SE_RULE(heatingSetpoint, 1, GRAMMAR_135, GRAMMAR_303), // 187
  RULE(AT, STRING, href, 0, GRAMMAR_304), // 188
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_305, 8), // 189
  SE_RULE(mRID, 1, GRAMMAR_306, GRAMMAR_122), // 190
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_307), // 191
  RULE(AT, STRING, href, 0, GRAMMAR_308), // 192
  NBIT_RULE(AT, subscribable, 1, GRAMMAR_135, 8), // 193
  RULE(AT, STRING, href, 0, GRAMMAR_309), // 194
  SE_RULE(subscribedResource, 1, GRAMMAR_310, GRAMMAR_230), // 195
  RULE(AT, STRING, href, 0, GRAMMAR_311), // 196
  SE_RULE(subscribedResource, 1, GRAMMAR_135, GRAMMAR_230), // 197
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_312), // 198
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_313), // 199
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_314), // 200
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_315), // 201
  SE_RULE(multiplier, 1, GRAMMAR_316, GRAMMAR_62), // 202
  RULE(AT, STRING, href, 0, GRAMMAR_317), // 203
  RULE(AT, STRING, replyTo, 0, GRAMMAR_318), // 204
  RULE(AT, BINARY, responseRequired, 0, GRAMMAR_319), // 205
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_320, 8), // 206
  SE_RULE(mRID, 1, GRAMMAR_321, GRAMMAR_122), // 207
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_322), // 208
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_323), // 209
  RULE(AT, STRING, href, 0, GRAMMAR_324), // 210
  SE_RULE(createdDateTime, 0, GRAMMAR_325, GRAMMAR_113), // 211
  SE_RULE(endDeviceLFDI, 1, GRAMMAR_326, GRAMMAR_169), // 212
  RULE(AT, STRING, href, 0, GRAMMAR_327), // 213
  SE_RULE(currentTime, 1, GRAMMAR_328, GRAMMAR_113), // 214
  SE_RULE(dstEndRule, 1, GRAMMAR_329, GRAMMAR_26), // 215
  RULE(CH, INTEGER, NONE, 1, GRAMMAR_135), // 216
  SE_RULE(multiplier, 1, GRAMMAR_330, GRAMMAR_62), // 217
  RULE(AT, STRING, href, 0, GRAMMAR_331), // 218
  SE_RULE(mRID, 1, GRAMMAR_332, GRAMMAR_122), // 219
  RULE(AT, STRING, href, 0, GRAMMAR_333), // 220
  SE_RULE(mRID, 1, GRAMMAR_334, GRAMMAR_122), // 221
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_335), // 222
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_336), // 223
  SE_RULE(value, 1, GRAMMAR_135, GRAMMAR_303), // 224
  SE_RULE(value, 1, GRAMMAR_135, GRAMMAR_337), // 225
  SE_RULE(lowerThreshold, 1, GRAMMAR_338, GRAMMAR_245), // 226
  SE_RULE(PowerConfiguration, 0, GRAMMAR_339, GRAMMAR_61), // 227
  SE_RULE(PriceResponseCfgListLink, 0, GRAMMAR_340, GRAMMAR_66), // 228
  SE_RULE(TimeConfiguration, 0, GRAMMAR_341, GRAMMAR_110), // 229
  SE_RULE(userDeviceName, 1, GRAMMAR_135, GRAMMAR_342), // 230
  SE_RULE(maxDemand, 1, GRAMMAR_343, GRAMMAR_2), // 231
  SE_RULE(start, 1, GRAMMAR_135, GRAMMAR_113), // 232
  SE_RULE(mfDate, 1, GRAMMAR_344, GRAMMAR_113), // 233
  SE_RULE(onCount, 0, GRAMMAR_345, GRAMMAR_337), // 234
  SE_RULE(opState, 0, GRAMMAR_346, GRAMMAR_140), // 235
  SE_RULE(opTime, 0, GRAMMAR_347, GRAMMAR_149), // 236
  SE_RULE(Temperature, 0, GRAMMAR_348, GRAMMAR_104), // 237
  SE_RULE(TimeLink, 1, GRAMMAR_135, GRAMMAR_111), // 238
  SE_RULE(status, 0, GRAMMAR_349, GRAMMAR_140), // 239
  SE_RULE(subject, 1, GRAMMAR_350, GRAMMAR_122), // 240
  SE_RULE(FlowReservationRequestListLink, 0, GRAMMAR_351, GRAMMAR_36), // 241
  SE_RULE(FlowReservationResponseListLink, 0, GRAMMAR_352, GRAMMAR_37), // 242
  SE_RULE(FunctionSetAssignmentsListLink, 0, GRAMMAR_353, GRAMMAR_39), // 243
  SE_RULE(RegistrationLink, 0, GRAMMAR_354, GRAMMAR_82), // 244
  SE_RULE(SubscriptionListLink, 1, GRAMMAR_135, GRAMMAR_100), // 245
  RULE(AT, STRING, href, 0, GRAMMAR_355), // 246
  NBIT_RULE(AT, results, 1, GRAMMAR_356, 8), // 247
  SE_RULE(description, 0, GRAMMAR_357, GRAMMAR_342), // 248
  SE_RULE(version, 0, GRAMMAR_358, GRAMMAR_121), // 249
  SE_RULE(creationTime, 1, GRAMMAR_359, GRAMMAR_113), // 250
  SE_RULE(dateTime, 1, GRAMMAR_360, GRAMMAR_113), // 251
  SE_RULE(description, 0, GRAMMAR_361, GRAMMAR_342), // 252
  SE_RULE(version, 1, GRAMMAR_135, GRAMMAR_121), // 253
  RULE(AT, STRING, href, 0, GRAMMAR_362), // 254
  NBIT_RULE(AT, results, 1, GRAMMAR_135, 8), // 255
  SE_RULE(description, 0, GRAMMAR_363, GRAMMAR_342), // 256
  SE_RULE(version, 0, GRAMMAR_364, GRAMMAR_121), // 257
  SE_RULE(ActiveTextMessageListLink, 0, GRAMMAR_365, GRAMMAR_3), // 258
  SE_RULE(locale, 1, GRAMMAR_366, GRAMMAR_47), // 259
  RULE(AT, STRING, href, 0, GRAMMAR_367), // 260
  NBIT_RULE(AT, results, 1, GRAMMAR_368, 8), // 261
  SE_RULE(description, 0, GRAMMAR_369, GRAMMAR_342), // 262
  SE_RULE(version, 0, GRAMMAR_370, GRAMMAR_121), // 263
  SE_RULE(RateComponentListLink, 0, GRAMMAR_371, GRAMMAR_69), // 264
  SE_RULE(ReadingLink, 0, GRAMMAR_372, GRAMMAR_72), // 265
  SE_RULE(ReadingSetListLink, 0, GRAMMAR_373, GRAMMAR_78), // 266
  SE_RULE(ReadingTypeLink, 1, GRAMMAR_135, GRAMMAR_80), // 267
  SE_RULE(description, 0, GRAMMAR_374, GRAMMAR_342), // 268
  SE_RULE(version, 1, GRAMMAR_135, GRAMMAR_121), // 269
  RULE(AT, STRING, href, 0, GRAMMAR_375), // 270
  NBIT_RULE(AT, results, 1, GRAMMAR_376, 8), // 271
  SE_RULE(newResourceURI, 0, GRAMMAR_377, GRAMMAR_230), // 272
  SE_RULE(Resource, 0, GRAMMAR_378, GRAMMAR_83), // 273
  SE_RULE(status, 1, GRAMMAR_379, GRAMMAR_140), // 274
  RULE(AT, STRING, href, 0, GRAMMAR_380), // 275
  NBIT_RULE(AT, results, 1, GRAMMAR_381, 8), // 276
  SE_RULE(description, 0, GRAMMAR_382, GRAMMAR_342), // 277
  SE_RULE(version, 0, GRAMMAR_383, GRAMMAR_121), // 278
  SE_RULE(timePeriod, 1, GRAMMAR_384, GRAMMAR_17), // 279
  SE_RULE(description, 0, GRAMMAR_385, GRAMMAR_342), // 280
  SE_RULE(version, 0, GRAMMAR_386, GRAMMAR_121), // 281
  SE_RULE(timePeriod, 1, GRAMMAR_135, GRAMMAR_17), // 282
  RULE(AT, STRING, href, 0, GRAMMAR_387), // 283
  NBIT_RULE(AT, results, 1, GRAMMAR_388, 8), // 284
  RULE(CH, BOOLEAN, NONE, 1, GRAMMAR_135), // 285
  SE_RULE(value, 1, GRAMMAR_135, GRAMMAR_275), // 286
  SE_RULE(description, 0, GRAMMAR_389, GRAMMAR_342), // 287
  SE_RULE(version, 1, GRAMMAR_135, GRAMMAR_121), // 288
  SE_RULE(status, 0, GRAMMAR_390, GRAMMAR_140), // 289
  SE_RULE(subject, 1, GRAMMAR_135, GRAMMAR_122), // 290
  SE_RULE(description, 0, GRAMMAR_391, GRAMMAR_342), // 291
  SE_RULE(version, 1, GRAMMAR_135, GRAMMAR_121), // 292
  RULE(AT, STRING, href, 0, GRAMMAR_392), // 293
  NBIT_RULE(AT, results, 1, GRAMMAR_393, 8), // 294
  SE_RULE(Condition, 0, GRAMMAR_394, GRAMMAR_8), // 295
  SE_RULE(encoding, 1, GRAMMAR_395, GRAMMAR_140), // 296
  RULE(AT, STRING, href, 0, GRAMMAR_396), // 297
  NBIT_RULE(AT, results, 1, GRAMMAR_397, 8), // 298
  SE_RULE(subject, 1, GRAMMAR_398, GRAMMAR_140), // 299
  SE_RULE(description, 0, GRAMMAR_399, GRAMMAR_342), // 300
  SE_RULE(version, 0, GRAMMAR_400, GRAMMAR_121), // 301
  SE_RULE(creationTime, 1, GRAMMAR_401, GRAMMAR_113), // 302
  RULE(AT, STRING, href, 0, GRAMMAR_402), // 303
  NBIT_RULE(AT, results, 1, GRAMMAR_403, 8), // 304
  SE_RULE(status, 0, GRAMMAR_404, GRAMMAR_140), // 305
  SE_RULE(subject, 1, GRAMMAR_135, GRAMMAR_122), // 306
  SE_RULE(dstEndTime, 1, GRAMMAR_405, GRAMMAR_113), // 307
  SE_RULE(dstOffset, 1, GRAMMAR_406, GRAMMAR_112), // 308
  SE_RULE(unit, 1, GRAMMAR_407, GRAMMAR_116), // 309
  SE_RULE(description, 0, GRAMMAR_408, GRAMMAR_342), // 310
  SE_RULE(version, 0, GRAMMAR_409, GRAMMAR_121), // 311
  SE_RULE(roleFlags, 1, GRAMMAR_410, GRAMMAR_88), // 312
  SE_RULE(description, 0, GRAMMAR_411, GRAMMAR_342), // 313
  SE_RULE(version, 0, GRAMMAR_412, GRAMMAR_121), // 314
  SE_RULE(roleFlags, 1, GRAMMAR_413, GRAMMAR_88), // 315
  RULE(AT, STRING, href, 0, GRAMMAR_414), // 316
  NBIT_RULE(AT, results, 1, GRAMMAR_415, 8), // 317
  SE_RULE(upperThreshold, 1, GRAMMAR_135, GRAMMAR_245), // 318
  SE_RULE(optionsImplemented, 1, GRAMMAR_135, GRAMMAR_416), // 319
  SE_RULE(mfHwVer, 1, GRAMMAR_417, GRAMMAR_342), // 320
  SE_RULE(ApplianceLoadReduction, 0, GRAMMAR_418, GRAMMAR_4), // 321
  SE_RULE(AppliedTargetReduction, 0, GRAMMAR_419, GRAMMAR_6), // 322
  SE_RULE(DutyCycle, 0, GRAMMAR_420, GRAMMAR_27), // 323
  SE_RULE(Offset, 0, GRAMMAR_421, GRAMMAR_58), // 324
  SE_RULE(overrideDuration, 0, GRAMMAR_422, GRAMMAR_337), // 325
  SE_RULE(SetPoint, 1, GRAMMAR_135, GRAMMAR_93), // 326
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_423, 8), // 327
  SE_RULE(EndDevice, 1, GRAMMAR_424, GRAMMAR_28), // 328
  SE_RULE(EventStatus, 1, GRAMMAR_425, GRAMMAR_32), // 329
  SE_RULE(potentiallySuperseded, 1, GRAMMAR_426, GRAMMAR_277), // 330
  SE_RULE(primacy, 1, GRAMMAR_427, GRAMMAR_67), // 331
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_428, 8), // 332
  SE_RULE(MessagingProgram, 1, GRAMMAR_429, GRAMMAR_49), // 333
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_430, 8), // 334
  SE_RULE(MeterReading, 1, GRAMMAR_431, GRAMMAR_52), // 335
  SE_RULE(subscriptionURI, 1, GRAMMAR_135, GRAMMAR_230), // 336
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_432, 8), // 337
  SE_RULE(Reading, 1, GRAMMAR_433, GRAMMAR_70), // 338
  SE_RULE(ReadingListLink, 1, GRAMMAR_135, GRAMMAR_74), // 339
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_434, 8), // 340
  SE_RULE(ReadingSet, 1, GRAMMAR_435, GRAMMAR_75), // 341
  SE_RULE(level, 1, GRAMMAR_436, GRAMMAR_437), // 342
  SE_RULE(Subscription, 1, GRAMMAR_438, GRAMMAR_97), // 343
  SE_RULE(EventStatus, 1, GRAMMAR_439, GRAMMAR_32), // 344
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_440, 8), // 345
  SE_RULE(TextMessage, 1, GRAMMAR_441, GRAMMAR_105), // 346
  SE_RULE(dstOffset, 1, GRAMMAR_442, GRAMMAR_112), // 347
  SE_RULE(dstStartRule, 1, GRAMMAR_443, GRAMMAR_26), // 348
  SE_RULE(value, 1, GRAMMAR_135, GRAMMAR_444), // 349
  SE_RULE(serviceCategoryKind, 1, GRAMMAR_445, GRAMMAR_92), // 350
  SE_RULE(serviceCategoryKind, 1, GRAMMAR_446, GRAMMAR_92), // 351
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_447, 8), // 352
  SE_RULE(UsagePoint, 1, GRAMMAR_448, GRAMMAR_117), // 353
  SE_RULE(mfID, 1, GRAMMAR_449, GRAMMAR_59), // 354
  SE_RULE(interval, 1, GRAMMAR_135, GRAMMAR_17), // 355
  SE_RULE(potentiallySupersededTime, 0, GRAMMAR_450, GRAMMAR_113), // 356
  SE_RULE(reason, 1, GRAMMAR_135, GRAMMAR_451), // 357
  SE_RULE(TextMessageListLink, 1, GRAMMAR_135, GRAMMAR_107), // 358
  SE_RULE(limit, 1, GRAMMAR_452, GRAMMAR_337), // 359
  SE_RULE(interval, 1, GRAMMAR_453, GRAMMAR_17), // 360
  SE_RULE(dstStartTime, 1, GRAMMAR_454, GRAMMAR_113), // 361
  SE_RULE(tzOffset, 1, GRAMMAR_135, GRAMMAR_112), // 362
  SE_RULE(status, 1, GRAMMAR_455, GRAMMAR_140), // 363
  SE_RULE(status, 1, GRAMMAR_135, GRAMMAR_140), // 364
  SE_RULE(mfInfo, 0, GRAMMAR_456, GRAMMAR_342), // 365
  SE_RULE(mfModel, 1, GRAMMAR_457, GRAMMAR_342), // 366
  SE_RULE(notificationURI, 1, GRAMMAR_135, GRAMMAR_230), // 367
  SE_RULE(originator, 0, GRAMMAR_458, GRAMMAR_459), // 368
  SE_RULE(priority, 1, GRAMMAR_460, GRAMMAR_68), // 369
  SE_RULE(localTime, 0, GRAMMAR_461, GRAMMAR_113), // 370
  SE_RULE(quality, 1, GRAMMAR_462, GRAMMAR_140), // 371
  SE_RULE(MeterReadingListLink, 1, GRAMMAR_135, GRAMMAR_55), // 372
  SE_RULE(mfSerNum, 1, GRAMMAR_463, GRAMMAR_342), // 373
  SE_RULE(textMessage, 1, GRAMMAR_135, GRAMMAR_464), // 374
  SE_RULE(primaryPower, 1, GRAMMAR_465, GRAMMAR_63), // 375
  SE_RULE(secondaryPower, 1, GRAMMAR_466, GRAMMAR_63), // 376
  SE_RULE(SupportedLocaleListLink, 0, GRAMMAR_467, GRAMMAR_101), // 377
  SE_RULE(swActTime, 1, GRAMMAR_468, GRAMMAR_113), // 378
  SE_RULE(swVer, 1, GRAMMAR_135, GRAMMAR_342), // 379
};

static const EmberExiGrammar grammars[] = {

// Grammar count: 469
  GRAMMAR_0,
  GRAMMAR_1,
  GRAMMAR_2,
  GRAMMAR_3,
  GRAMMAR_4,
  GRAMMAR_5,
  GRAMMAR_6,
  GRAMMAR_7,
  GRAMMAR_8,
  GRAMMAR_9,
  GRAMMAR_10,
  GRAMMAR_11,
  GRAMMAR_12,
  GRAMMAR_13,
  GRAMMAR_14,
  GRAMMAR_15,
  GRAMMAR_16,
  GRAMMAR_17,
  GRAMMAR_18,
  GRAMMAR_19,
  GRAMMAR_20,
  GRAMMAR_21,
  GRAMMAR_22,
  GRAMMAR_23,
  GRAMMAR_24,
  GRAMMAR_25,
  GRAMMAR_26,
  GRAMMAR_27,
  GRAMMAR_28,
  GRAMMAR_29,
  GRAMMAR_30,
  GRAMMAR_31,
  GRAMMAR_32,
  GRAMMAR_33,
  GRAMMAR_34,
  GRAMMAR_35,
  GRAMMAR_36,
  GRAMMAR_37,
  GRAMMAR_38,
  GRAMMAR_39,
  GRAMMAR_40,
  GRAMMAR_41,
  GRAMMAR_42,
  GRAMMAR_43,
  GRAMMAR_44,
  GRAMMAR_45,
  GRAMMAR_46,
  GRAMMAR_47,
  GRAMMAR_48,
  GRAMMAR_49,
  GRAMMAR_50,
  GRAMMAR_51,
  GRAMMAR_52,
  GRAMMAR_53,
  GRAMMAR_54,
  GRAMMAR_55,
  GRAMMAR_56,
  GRAMMAR_57,
  GRAMMAR_58,
  GRAMMAR_59,
  GRAMMAR_60,
  GRAMMAR_61,
  GRAMMAR_62,
  GRAMMAR_63,
  GRAMMAR_64,
  GRAMMAR_65,
  GRAMMAR_66,
  GRAMMAR_67,
  GRAMMAR_68,
  GRAMMAR_69,
  GRAMMAR_70,
  GRAMMAR_71,
  GRAMMAR_72,
  GRAMMAR_73,
  GRAMMAR_74,
  GRAMMAR_75,
  GRAMMAR_76,
  GRAMMAR_77,
  GRAMMAR_78,
  GRAMMAR_79,
  GRAMMAR_80,
  GRAMMAR_81,
  GRAMMAR_82,
  GRAMMAR_83,
  GRAMMAR_84,
  GRAMMAR_85,
  GRAMMAR_86,
  GRAMMAR_87,
  GRAMMAR_88,
  GRAMMAR_89,
  GRAMMAR_90,
  GRAMMAR_91,
  GRAMMAR_92,
  GRAMMAR_93,
  GRAMMAR_94,
  GRAMMAR_95,
  GRAMMAR_96,
  GRAMMAR_97,
  GRAMMAR_98,
  GRAMMAR_99,
  GRAMMAR_100,
  GRAMMAR_101,
  GRAMMAR_102,
  GRAMMAR_103,
  GRAMMAR_104,
  GRAMMAR_105,
  GRAMMAR_106,
  GRAMMAR_107,
  GRAMMAR_108,
  GRAMMAR_109,
  GRAMMAR_110,
  GRAMMAR_111,
  GRAMMAR_112,
  GRAMMAR_113,
  GRAMMAR_114,
  GRAMMAR_115,
  GRAMMAR_116,
  GRAMMAR_117,
  GRAMMAR_118,
  GRAMMAR_119,
  GRAMMAR_120,
  GRAMMAR_121,
  GRAMMAR_122,
  GRAMMAR_123,
  GRAMMAR_124,
  GRAMMAR_125,
  GRAMMAR_126,
  GRAMMAR_127,
  GRAMMAR_128,
  GRAMMAR_129,
  GRAMMAR_130,
  GRAMMAR_131,
  GRAMMAR_132,
  GRAMMAR_133,
  GRAMMAR_134,
  GRAMMAR_135,
  GRAMMAR_136,
  GRAMMAR_137,
  GRAMMAR_138,
  GRAMMAR_139,
  GRAMMAR_140,
  GRAMMAR_141,
  GRAMMAR_142,
  GRAMMAR_143,
  GRAMMAR_144,
  GRAMMAR_145,
  GRAMMAR_146,
  GRAMMAR_147,
  GRAMMAR_148,
  GRAMMAR_149,
  GRAMMAR_150,
  GRAMMAR_151,
  GRAMMAR_152,
  GRAMMAR_153,
  GRAMMAR_154,
  GRAMMAR_155,
  GRAMMAR_156,
  GRAMMAR_157,
  GRAMMAR_158,
  GRAMMAR_159,
  GRAMMAR_160,
  GRAMMAR_161,
  GRAMMAR_162,
  GRAMMAR_163,
  GRAMMAR_164,
  GRAMMAR_165,
  GRAMMAR_166,
  GRAMMAR_167,
  GRAMMAR_168,
  GRAMMAR_169,
  GRAMMAR_170,
  GRAMMAR_171,
  GRAMMAR_172,
  GRAMMAR_173,
  GRAMMAR_174,
  GRAMMAR_175,
  GRAMMAR_176,
  GRAMMAR_177,
  GRAMMAR_178,
  GRAMMAR_179,
  GRAMMAR_180,
  GRAMMAR_181,
  GRAMMAR_182,
  GRAMMAR_183,
  GRAMMAR_184,
  GRAMMAR_185,
  GRAMMAR_186,
  GRAMMAR_187,
  GRAMMAR_188,
  GRAMMAR_189,
  GRAMMAR_190,
  GRAMMAR_191,
  GRAMMAR_192,
  GRAMMAR_193,
  GRAMMAR_194,
  GRAMMAR_195,
  GRAMMAR_196,
  GRAMMAR_197,
  GRAMMAR_198,
  GRAMMAR_199,
  GRAMMAR_200,
  GRAMMAR_201,
  GRAMMAR_202,
  GRAMMAR_203,
  GRAMMAR_204,
  GRAMMAR_205,
  GRAMMAR_206,
  GRAMMAR_207,
  GRAMMAR_208,
  GRAMMAR_209,
  GRAMMAR_210,
  GRAMMAR_211,
  GRAMMAR_212,
  GRAMMAR_213,
  GRAMMAR_214,
  GRAMMAR_215,
  GRAMMAR_216,
  GRAMMAR_217,
  GRAMMAR_218,
  GRAMMAR_219,
  GRAMMAR_220,
  GRAMMAR_221,
  GRAMMAR_222,
  GRAMMAR_223,
  GRAMMAR_224,
  GRAMMAR_225,
  GRAMMAR_226,
  GRAMMAR_227,
  GRAMMAR_228,
  GRAMMAR_229,
  GRAMMAR_230,
  GRAMMAR_231,
  GRAMMAR_232,
  GRAMMAR_233,
  GRAMMAR_234,
  GRAMMAR_235,
  GRAMMAR_236,
  GRAMMAR_237,
  GRAMMAR_238,
  GRAMMAR_239,
  GRAMMAR_240,
  GRAMMAR_241,
  GRAMMAR_242,
  GRAMMAR_243,
  GRAMMAR_244,
  GRAMMAR_245,
  GRAMMAR_246,
  GRAMMAR_247,
  GRAMMAR_248,
  GRAMMAR_249,
  GRAMMAR_250,
  GRAMMAR_251,
  GRAMMAR_252,
  GRAMMAR_253,
  GRAMMAR_254,
  GRAMMAR_255,
  GRAMMAR_256,
  GRAMMAR_257,
  GRAMMAR_258,
  GRAMMAR_259,
  GRAMMAR_260,
  GRAMMAR_261,
  GRAMMAR_262,
  GRAMMAR_263,
  GRAMMAR_264,
  GRAMMAR_265,
  GRAMMAR_266,
  GRAMMAR_267,
  GRAMMAR_268,
  GRAMMAR_269,
  GRAMMAR_270,
  GRAMMAR_271,
  GRAMMAR_272,
  GRAMMAR_273,
  GRAMMAR_274,
  GRAMMAR_275,
  GRAMMAR_276,
  GRAMMAR_277,
  GRAMMAR_278,
  GRAMMAR_279,
  GRAMMAR_280,
  GRAMMAR_281,
  GRAMMAR_282,
  GRAMMAR_283,
  GRAMMAR_284,
  GRAMMAR_285,
  GRAMMAR_286,
  GRAMMAR_287,
  GRAMMAR_288,
  GRAMMAR_289,
  GRAMMAR_290,
  GRAMMAR_291,
  GRAMMAR_292,
  GRAMMAR_293,
  GRAMMAR_294,
  GRAMMAR_295,
  GRAMMAR_296,
  GRAMMAR_297,
  GRAMMAR_298,
  GRAMMAR_299,
  GRAMMAR_300,
  GRAMMAR_301,
  GRAMMAR_302,
  GRAMMAR_303,
  GRAMMAR_304,
  GRAMMAR_305,
  GRAMMAR_306,
  GRAMMAR_307,
  GRAMMAR_308,
  GRAMMAR_309,
  GRAMMAR_310,
  GRAMMAR_311,
  GRAMMAR_312,
  GRAMMAR_313,
  GRAMMAR_314,
  GRAMMAR_315,
  GRAMMAR_316,
  GRAMMAR_317,

};
#define DEFINE_EXI_GRAMMAR(prefix, grammarSetName) \
EmberExiGrammarSet grammarSetName = { 318, 9, 10, topLevelQnames, qnameSparseEventCodes, grammars, productions}; \
const char * const grammarSetName##XsdFile = "sep_r60.xsd";

#endif // __EMBER_EXI_GENERATED_FILE_GRAMMAR__
