// This file is generated. Please do not edit manually.
// 
//

// Enclosing macro to prevent multiple inclusion
#ifndef __EMBER_EXI_GENERATED_FILE_GRAMMAR__
#define __EMBER_EXI_GENERATED_FILE_GRAMMAR__


// This file contains the statically generated data for grammar. 

// generated from file: "sep_r60.xsd"
// generate all types: false
// requested types:
//    AbstractDevice  AccumulationBehaviourType  ActivePower  ApplianceLoadReduction  
//    ApplianceLoadReductionType  AppliedTargetReduction  CommodityType  
//    Condition  Configuration  ConfigurationLink  ConsumptionBlockType  
//    CustomerAccountListLink  DERListLink  DERProgramListLink  DRLCCapabilities  
//    DataQualifierType  DateTimeInterval  DemandResponseProgramListLink  
//    DeviceCapability  DeviceCategoryType  DeviceInformation  DeviceInformationLink  
//    DeviceStatus  DeviceStatusLink  DrResponse  DstRuleType  DutyCycle  
//    EndDevice  EndDeviceList  EndDeviceListLink  FileListLink  FileStatusLink  
//    FlowDirectionType  FlowReservationRequestListLink  FlowReservationResponseListLink  
//    FunctionSetAssignmentsBase  FunctionSetAssignmentsListLink  IPInterfaceListLink  
//    IdentifiedObject  KindType  Link  List  ListLink  LoadShedAvailabilityLink  
//    LocaleType  LogEvent  LogEventList  LogEventListLink  MessagingProgramListLink  
//    MeterReading  MeterReadingBase  MeterReadingList  MeterReadingListLink  
//    MirrorUsagePointListLink  Notification  Offset  PENType  PhaseCode  
//    PowerConfiguration  PowerOfTenMultiplierType  PowerSourceType  
//    PowerStatusLink  PrepaymentListLink  PriceResponseCfgListLink  
//    RateComponentListLink  Reading  ReadingBase  ReadingLink  ReadingList  
//    ReadingListLink  ReadingSet  ReadingSetBase  ReadingSetList  
//    ReadingSetListLink  ReadingType  ReadingTypeLink  RealEnergy  
//    RegistrationLink  Resource  Response  ResponseSetListLink  RoleFlagsType  
//    SFDIType  SelfDevice  SelfDeviceLink  ServiceKind  SetPoint  
//    SubscribableList  SubscribableResource  Subscription  SubscriptionBase  
//    SubscriptionList  SubscriptionListLink  SupportedLocaleListLink  
//    TOUType  TariffProfileListLink  Temperature  TextResponse  Time  
//    TimeConfiguration  TimeLink  TimeOffsetType  TimeType  UnitType  
//    UnitValueType  UomType  UsagePoint  UsagePointBase  UsagePointList  
//    UsagePointListLink  VersionType  mRIDType  

// Qname count: 112
static EmberExiQname const topLevelQnames[] = {
  EMBER_EXI_QNAME_AbstractDevice,   // 0
  EMBER_EXI_QNAME_AccumulationBehaviourType,   // 1
  EMBER_EXI_QNAME_ActivePower,   // 2
  EMBER_EXI_QNAME_ApplianceLoadReduction,   // 3
  EMBER_EXI_QNAME_ApplianceLoadReductionType,   // 4
  EMBER_EXI_QNAME_AppliedTargetReduction,   // 5
  EMBER_EXI_QNAME_CommodityType,   // 6
  EMBER_EXI_QNAME_Condition,   // 7
  EMBER_EXI_QNAME_Configuration,   // 8
  EMBER_EXI_QNAME_ConfigurationLink,   // 9
  EMBER_EXI_QNAME_ConsumptionBlockType,   // 10
  EMBER_EXI_QNAME_CustomerAccountListLink,   // 11
  EMBER_EXI_QNAME_DERListLink,   // 12
  EMBER_EXI_QNAME_DERProgramListLink,   // 13
  EMBER_EXI_QNAME_DRLCCapabilities,   // 14
  EMBER_EXI_QNAME_DataQualifierType,   // 15
  EMBER_EXI_QNAME_DateTimeInterval,   // 16
  EMBER_EXI_QNAME_DemandResponseProgramListLink,   // 17
  EMBER_EXI_QNAME_DeviceCapability,   // 18
  EMBER_EXI_QNAME_DeviceCategoryType,   // 19
  EMBER_EXI_QNAME_DeviceInformation,   // 20
  EMBER_EXI_QNAME_DeviceInformationLink,   // 21
  EMBER_EXI_QNAME_DeviceStatus,   // 22
  EMBER_EXI_QNAME_DeviceStatusLink,   // 23
  EMBER_EXI_QNAME_DrResponse,   // 24
  EMBER_EXI_QNAME_DstRuleType,   // 25
  EMBER_EXI_QNAME_DutyCycle,   // 26
  EMBER_EXI_QNAME_EndDevice,   // 27
  EMBER_EXI_QNAME_EndDeviceList,   // 28
  EMBER_EXI_QNAME_EndDeviceListLink,   // 29
  EMBER_EXI_QNAME_FileListLink,   // 30
  EMBER_EXI_QNAME_FileStatusLink,   // 31
  EMBER_EXI_QNAME_FlowDirectionType,   // 32
  EMBER_EXI_QNAME_FlowReservationRequestListLink,   // 33
  EMBER_EXI_QNAME_FlowReservationResponseListLink,   // 34
  EMBER_EXI_QNAME_FunctionSetAssignmentsBase,   // 35
  EMBER_EXI_QNAME_FunctionSetAssignmentsListLink,   // 36
  EMBER_EXI_QNAME_IPInterfaceListLink,   // 37
  EMBER_EXI_QNAME_IdentifiedObject,   // 38
  EMBER_EXI_QNAME_KindType,   // 39
  EMBER_EXI_QNAME_Link,   // 40
  EMBER_EXI_QNAME_List,   // 41
  EMBER_EXI_QNAME_ListLink,   // 42
  EMBER_EXI_QNAME_LoadShedAvailabilityLink,   // 43
  EMBER_EXI_QNAME_LocaleType,   // 44
  EMBER_EXI_QNAME_LogEvent,   // 45
  EMBER_EXI_QNAME_LogEventList,   // 46
  EMBER_EXI_QNAME_LogEventListLink,   // 47
  EMBER_EXI_QNAME_MessagingProgramListLink,   // 48
  EMBER_EXI_QNAME_MeterReading,   // 49
  EMBER_EXI_QNAME_MeterReadingBase,   // 50
  EMBER_EXI_QNAME_MeterReadingList,   // 51
  EMBER_EXI_QNAME_MeterReadingListLink,   // 52
  EMBER_EXI_QNAME_MirrorUsagePointListLink,   // 53
  EMBER_EXI_QNAME_Notification,   // 54
  EMBER_EXI_QNAME_Offset,   // 55
  EMBER_EXI_QNAME_PENType,   // 56
  EMBER_EXI_QNAME_PhaseCode,   // 57
  EMBER_EXI_QNAME_PowerConfiguration,   // 58
  EMBER_EXI_QNAME_PowerOfTenMultiplierType,   // 59
  EMBER_EXI_QNAME_PowerSourceType,   // 60
  EMBER_EXI_QNAME_PowerStatusLink,   // 61
  EMBER_EXI_QNAME_PrepaymentListLink,   // 62
  EMBER_EXI_QNAME_PriceResponseCfgListLink,   // 63
  EMBER_EXI_QNAME_RateComponentListLink,   // 64
  EMBER_EXI_QNAME_Reading,   // 65
  EMBER_EXI_QNAME_ReadingBase,   // 66
  EMBER_EXI_QNAME_ReadingLink,   // 67
  EMBER_EXI_QNAME_ReadingList,   // 68
  EMBER_EXI_QNAME_ReadingListLink,   // 69
  EMBER_EXI_QNAME_ReadingSet,   // 70
  EMBER_EXI_QNAME_ReadingSetBase,   // 71
  EMBER_EXI_QNAME_ReadingSetList,   // 72
  EMBER_EXI_QNAME_ReadingSetListLink,   // 73
  EMBER_EXI_QNAME_ReadingType,   // 74
  EMBER_EXI_QNAME_ReadingTypeLink,   // 75
  EMBER_EXI_QNAME_RealEnergy,   // 76
  EMBER_EXI_QNAME_RegistrationLink,   // 77
  EMBER_EXI_QNAME_Resource,   // 78
  EMBER_EXI_QNAME_Response,   // 79
  EMBER_EXI_QNAME_ResponseSetListLink,   // 80
  EMBER_EXI_QNAME_RoleFlagsType,   // 81
  EMBER_EXI_QNAME_SFDIType,   // 82
  EMBER_EXI_QNAME_SelfDevice,   // 83
  EMBER_EXI_QNAME_SelfDeviceLink,   // 84
  EMBER_EXI_QNAME_ServiceKind,   // 85
  EMBER_EXI_QNAME_SetPoint,   // 86
  EMBER_EXI_QNAME_SubscribableList,   // 87
  EMBER_EXI_QNAME_SubscribableResource,   // 88
  EMBER_EXI_QNAME_Subscription,   // 89
  EMBER_EXI_QNAME_SubscriptionBase,   // 90
  EMBER_EXI_QNAME_SubscriptionList,   // 91
  EMBER_EXI_QNAME_SubscriptionListLink,   // 92
  EMBER_EXI_QNAME_SupportedLocaleListLink,   // 93
  EMBER_EXI_QNAME_TOUType,   // 94
  EMBER_EXI_QNAME_TariffProfileListLink,   // 95
  EMBER_EXI_QNAME_Temperature,   // 96
  EMBER_EXI_QNAME_TextResponse,   // 97
  EMBER_EXI_QNAME_Time,   // 98
  EMBER_EXI_QNAME_TimeConfiguration,   // 99
  EMBER_EXI_QNAME_TimeLink,   // 100
  EMBER_EXI_QNAME_TimeOffsetType,   // 101
  EMBER_EXI_QNAME_TimeType,   // 102
  EMBER_EXI_QNAME_UnitType,   // 103
  EMBER_EXI_QNAME_UnitValueType,   // 104
  EMBER_EXI_QNAME_UomType,   // 105
  EMBER_EXI_QNAME_UsagePoint,   // 106
  EMBER_EXI_QNAME_UsagePointBase,   // 107
  EMBER_EXI_QNAME_UsagePointList,   // 108
  EMBER_EXI_QNAME_UsagePointListLink,   // 109
  EMBER_EXI_QNAME_VersionType,   // 110
  EMBER_EXI_QNAME_mRIDType,   // 111
};

// Sparse event codes are non-null when qnames are excluded
static int16u const qnameSparseEventCodes[] = {
  0,
  5,
  11,
  19,
  20,
  21,
  36,
  37,
  38,
  39,
  41,
  60,
  81,
  85,
  92,
  93,
  94,
  100,
  101,
  103,
  104,
  105,
  106,
  107,
  108,
  109,
  110,
  111,
  116,
  117,
  125,
  127,
  131,
  134,
  137,
  139,
  141,
  151,
  152,
  154,
  158,
  159,
  160,
  162,
  164,
  165,
  166,
  167,
  171,
  172,
  173,
  175,
  176,
  182,
  186,
  189,
  192,
  196,
  197,
  198,
  199,
  201,
  208,
  212,
  228,
  230,
  231,
  232,
  233,
  234,
  235,
  236,
  237,
  238,
  239,
  240,
  241,
  243,
  245,
  249,
  254,
  255,
  256,
  257,
  258,
  260,
  265,
  270,
  271,
  272,
  273,
  274,
  275,
  281,
  282,
  290,
  291,
  295,
  296,
  297,
  298,
  299,
  303,
  304,
  305,
  306,
  307,
  308,
  310,
  311,
  312,
  316,
};

#define GRAMMAR_0 GRAMMAR(NO_EE, XSI_TYPE, 0)
#define GRAMMAR_1 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_2 GRAMMAR(NO_EE, NO_XSI_TYPE, 14)
#define GRAMMAR_3 GRAMMAR(NO_EE, NO_XSI_TYPE, 15)
#define GRAMMAR_4 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_5 GRAMMAR(NO_EE, NO_XSI_TYPE, 16)
#define GRAMMAR_6 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_7 GRAMMAR(NO_EE, NO_XSI_TYPE, 17)
#define GRAMMAR_8 GRAMMAR(NO_EE, NO_XSI_TYPE, 18)
#define GRAMMAR_9 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_10 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_11 GRAMMAR(NO_EE, NO_XSI_TYPE, 22)
#define GRAMMAR_12 GRAMMAR(NO_EE, NO_XSI_TYPE, 23)
#define GRAMMAR_13 GRAMMAR(NO_EE, NO_XSI_TYPE, 24)
#define GRAMMAR_14 GRAMMAR(NO_EE, NO_XSI_TYPE, 25)
#define GRAMMAR_15 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_16 GRAMMAR(NO_EE, NO_XSI_TYPE, 26)
#define GRAMMAR_17 GRAMMAR(NO_EE, NO_XSI_TYPE, 27)
#define GRAMMAR_18 GRAMMAR(EE, NO_XSI_TYPE, 28)
#define GRAMMAR_19 GRAMMAR(NO_EE, NO_XSI_TYPE, 42)
#define GRAMMAR_20 GRAMMAR(NO_EE, NO_XSI_TYPE, 43)
#define GRAMMAR_21 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_22 GRAMMAR(NO_EE, NO_XSI_TYPE, 47)
#define GRAMMAR_23 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_24 GRAMMAR(NO_EE, NO_XSI_TYPE, 49)
#define GRAMMAR_25 GRAMMAR(NO_EE, NO_XSI_TYPE, 42)
#define GRAMMAR_26 GRAMMAR(NO_EE, NO_XSI_TYPE, 52)
#define GRAMMAR_27 GRAMMAR(NO_EE, NO_XSI_TYPE, 53)
#define GRAMMAR_28 GRAMMAR(NO_EE, NO_XSI_TYPE, 66)
#define GRAMMAR_29 GRAMMAR(NO_EE, NO_XSI_TYPE, 67)
#define GRAMMAR_30 GRAMMAR(NO_EE, NO_XSI_TYPE, 68)
#define GRAMMAR_31 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_32 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_33 GRAMMAR(NO_EE, NO_XSI_TYPE, 69)
#define GRAMMAR_34 GRAMMAR(NO_EE, NO_XSI_TYPE, 70)
#define GRAMMAR_35 GRAMMAR(EE, XSI_TYPE, 71)
#define GRAMMAR_36 GRAMMAR(NO_EE, NO_XSI_TYPE, 82)
#define GRAMMAR_37 GRAMMAR(NO_EE, NO_XSI_TYPE, 83)
#define GRAMMAR_38 GRAMMAR(NO_EE, XSI_TYPE, 84)
#define GRAMMAR_39 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_40 GRAMMAR(NO_EE, XSI_TYPE, 21)
#define GRAMMAR_41 GRAMMAR(NO_EE, XSI_TYPE, 86)
#define GRAMMAR_42 GRAMMAR(NO_EE, XSI_TYPE, 87)
#define GRAMMAR_43 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_44 GRAMMAR(NO_EE, NO_XSI_TYPE, 88)
#define GRAMMAR_45 GRAMMAR(NO_EE, NO_XSI_TYPE, 89)
#define GRAMMAR_46 GRAMMAR(NO_EE, NO_XSI_TYPE, 91)
#define GRAMMAR_47 GRAMMAR(NO_EE, NO_XSI_TYPE, 92)
#define GRAMMAR_48 GRAMMAR(NO_EE, NO_XSI_TYPE, 93)
#define GRAMMAR_49 GRAMMAR(NO_EE, NO_XSI_TYPE, 94)
#define GRAMMAR_50 GRAMMAR(NO_EE, XSI_TYPE, 96)
#define GRAMMAR_51 GRAMMAR(NO_EE, NO_XSI_TYPE, 98)
#define GRAMMAR_52 GRAMMAR(NO_EE, NO_XSI_TYPE, 99)
#define GRAMMAR_53 GRAMMAR(NO_EE, NO_XSI_TYPE, 100)
#define GRAMMAR_54 GRAMMAR(NO_EE, NO_XSI_TYPE, 101)
#define GRAMMAR_55 GRAMMAR(EE, NO_XSI_TYPE, 103)
#define GRAMMAR_56 GRAMMAR(NO_EE, NO_XSI_TYPE, 106)
#define GRAMMAR_57 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_58 GRAMMAR(EE, NO_XSI_TYPE, 107)
#define GRAMMAR_59 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_60 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_61 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_62 GRAMMAR(NO_EE, NO_XSI_TYPE, 109)
#define GRAMMAR_63 GRAMMAR(NO_EE, NO_XSI_TYPE, 110)
#define GRAMMAR_64 GRAMMAR(NO_EE, NO_XSI_TYPE, 111)
#define GRAMMAR_65 GRAMMAR(EE, NO_XSI_TYPE, 112)
#define GRAMMAR_66 GRAMMAR(EE, XSI_TYPE, 120)
#define GRAMMAR_67 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_68 GRAMMAR(NO_EE, NO_XSI_TYPE, 126)
#define GRAMMAR_69 GRAMMAR(NO_EE, NO_XSI_TYPE, 127)
#define GRAMMAR_70 GRAMMAR(NO_EE, NO_XSI_TYPE, 128)
#define GRAMMAR_71 GRAMMAR(NO_EE, XSI_TYPE, 130)
#define GRAMMAR_72 GRAMMAR(NO_EE, NO_XSI_TYPE, 132)
#define GRAMMAR_73 GRAMMAR(NO_EE, NO_XSI_TYPE, 133)
#define GRAMMAR_74 GRAMMAR(EE, NO_XSI_TYPE, 134)
#define GRAMMAR_75 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_76 GRAMMAR(NO_EE, NO_XSI_TYPE, 152)
#define GRAMMAR_77 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_78 GRAMMAR(EE, XSI_TYPE, 21)
#define GRAMMAR_79 GRAMMAR(NO_EE, XSI_TYPE, 153)
#define GRAMMAR_80 GRAMMAR(NO_EE, NO_XSI_TYPE, 156)
#define GRAMMAR_81 GRAMMAR(NO_EE, NO_XSI_TYPE, 42)
#define GRAMMAR_82 GRAMMAR(NO_EE, NO_XSI_TYPE, 106)
#define GRAMMAR_83 GRAMMAR(NO_EE, NO_XSI_TYPE, 157)
#define GRAMMAR_84 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_85 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_86 GRAMMAR(EE, NO_XSI_TYPE, 170)
#define GRAMMAR_87 GRAMMAR(NO_EE, XSI_TYPE, 172)
#define GRAMMAR_88 GRAMMAR(EE, XSI_TYPE, 173)
#define GRAMMAR_89 GRAMMAR(NO_EE, NO_XSI_TYPE, 175)
#define GRAMMAR_90 GRAMMAR(NO_EE, XSI_TYPE, 177)
#define GRAMMAR_91 GRAMMAR(NO_EE, NO_XSI_TYPE, 179)
#define GRAMMAR_92 GRAMMAR(NO_EE, NO_XSI_TYPE, 180)
#define GRAMMAR_93 GRAMMAR(NO_EE, NO_XSI_TYPE, 181)
#define GRAMMAR_94 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_95 GRAMMAR(NO_EE, NO_XSI_TYPE, 182)
#define GRAMMAR_96 GRAMMAR(NO_EE, NO_XSI_TYPE, 183)
#define GRAMMAR_97 GRAMMAR(NO_EE, NO_XSI_TYPE, 184)
#define GRAMMAR_98 GRAMMAR(NO_EE, NO_XSI_TYPE, 187)
#define GRAMMAR_99 GRAMMAR(NO_EE, NO_XSI_TYPE, 189)
#define GRAMMAR_100 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_101 GRAMMAR(NO_EE, NO_XSI_TYPE, 190)
#define GRAMMAR_102 GRAMMAR(NO_EE, NO_XSI_TYPE, 190)
#define GRAMMAR_103 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_104 GRAMMAR(NO_EE, NO_XSI_TYPE, 191)
#define GRAMMAR_105 GRAMMAR(NO_EE, NO_XSI_TYPE, 13)
#define GRAMMAR_106 GRAMMAR(NO_EE, NO_XSI_TYPE, 192)
#define GRAMMAR_107 GRAMMAR(NO_EE, XSI_TYPE, 194)
#define GRAMMAR_108 GRAMMAR(NO_EE, NO_XSI_TYPE, 196)
#define GRAMMAR_109 GRAMMAR(NO_EE, NO_XSI_TYPE, 197)
#define GRAMMAR_110 GRAMMAR(NO_EE, NO_XSI_TYPE, 106)
#define GRAMMAR_111 GRAMMAR(NO_EE, NO_XSI_TYPE, 42)
#define GRAMMAR_112 GRAMMAR(NO_EE, NO_XSI_TYPE, 1)
#define GRAMMAR_113 GRAMMAR(NO_EE, NO_XSI_TYPE, 2)
#define GRAMMAR_114 GRAMMAR(NO_EE, NO_XSI_TYPE, 3)
#define GRAMMAR_115 GRAMMAR(NO_EE, NO_XSI_TYPE, 4)
#define GRAMMAR_116 GRAMMAR(NO_EE, NO_XSI_TYPE, 5)
#define GRAMMAR_117 GRAMMAR(NO_EE, NO_XSI_TYPE, 6)
#define GRAMMAR_118 GRAMMAR(NO_EE, NO_XSI_TYPE, 7)
#define GRAMMAR_119 GRAMMAR(NO_EE, NO_XSI_TYPE, 8)
#define GRAMMAR_120 GRAMMAR(NO_EE, NO_XSI_TYPE, 9)
#define GRAMMAR_121 GRAMMAR(NO_EE, NO_XSI_TYPE, 10)
#define GRAMMAR_122 GRAMMAR(NO_EE, NO_XSI_TYPE, 11)
#define GRAMMAR_123 GRAMMAR(NO_EE, NO_XSI_TYPE, 12)
#define GRAMMAR_124 GRAMMAR(EE, NO_XSI_TYPE, 65535)
#define GRAMMAR_125 GRAMMAR(NO_EE, NO_XSI_TYPE, 198)
#define GRAMMAR_126 GRAMMAR(NO_EE, NO_XSI_TYPE, 199)
#define GRAMMAR_127 GRAMMAR(NO_EE, NO_XSI_TYPE, 200)
#define GRAMMAR_128 GRAMMAR(NO_EE, XSI_TYPE, 13)
#define GRAMMAR_129 GRAMMAR(NO_EE, NO_XSI_TYPE, 19)
#define GRAMMAR_130 GRAMMAR(NO_EE, NO_XSI_TYPE, 20)
#define GRAMMAR_131 GRAMMAR(NO_EE, NO_XSI_TYPE, 201)
#define GRAMMAR_132 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_133 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_134 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_135 GRAMMAR(NO_EE, NO_XSI_TYPE, 205)
#define GRAMMAR_136 GRAMMAR(NO_EE, NO_XSI_TYPE, 206)
#define GRAMMAR_137 GRAMMAR(NO_EE, XSI_TYPE, 106)
#define GRAMMAR_138 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_139 GRAMMAR(EE, NO_XSI_TYPE, 29)
#define GRAMMAR_140 GRAMMAR(EE, NO_XSI_TYPE, 30)
#define GRAMMAR_141 GRAMMAR(EE, NO_XSI_TYPE, 31)
#define GRAMMAR_142 GRAMMAR(EE, NO_XSI_TYPE, 32)
#define GRAMMAR_143 GRAMMAR(EE, NO_XSI_TYPE, 33)
#define GRAMMAR_144 GRAMMAR(EE, NO_XSI_TYPE, 34)
#define GRAMMAR_145 GRAMMAR(EE, NO_XSI_TYPE, 35)
#define GRAMMAR_146 GRAMMAR(EE, NO_XSI_TYPE, 36)
#define GRAMMAR_147 GRAMMAR(EE, NO_XSI_TYPE, 37)
#define GRAMMAR_148 GRAMMAR(EE, NO_XSI_TYPE, 38)
#define GRAMMAR_149 GRAMMAR(EE, NO_XSI_TYPE, 39)
#define GRAMMAR_150 GRAMMAR(EE, NO_XSI_TYPE, 40)
#define GRAMMAR_151 GRAMMAR(EE, NO_XSI_TYPE, 41)
#define GRAMMAR_152 GRAMMAR(NO_EE, NO_XSI_TYPE, 44)
#define GRAMMAR_153 GRAMMAR(NO_EE, NO_XSI_TYPE, 45)
#define GRAMMAR_154 GRAMMAR(NO_EE, NO_XSI_TYPE, 46)
#define GRAMMAR_155 GRAMMAR(NO_EE, NO_XSI_TYPE, 42)
#define GRAMMAR_156 GRAMMAR(NO_EE, NO_XSI_TYPE, 207)
#define GRAMMAR_157 GRAMMAR(NO_EE, NO_XSI_TYPE, 42)
#define GRAMMAR_158 GRAMMAR(NO_EE, NO_XSI_TYPE, 48)
#define GRAMMAR_159 GRAMMAR(EE, NO_XSI_TYPE, 208)
#define GRAMMAR_160 GRAMMAR(NO_EE, NO_XSI_TYPE, 50)
#define GRAMMAR_161 GRAMMAR(NO_EE, NO_XSI_TYPE, 51)
#define GRAMMAR_162 GRAMMAR(NO_EE, NO_XSI_TYPE, 213)
#define GRAMMAR_163 GRAMMAR(NO_EE, NO_XSI_TYPE, 54)
#define GRAMMAR_164 GRAMMAR(NO_EE, NO_XSI_TYPE, 55)
#define GRAMMAR_165 GRAMMAR(NO_EE, NO_XSI_TYPE, 56)
#define GRAMMAR_166 GRAMMAR(NO_EE, NO_XSI_TYPE, 57)
#define GRAMMAR_167 GRAMMAR(NO_EE, NO_XSI_TYPE, 58)
#define GRAMMAR_168 GRAMMAR(NO_EE, NO_XSI_TYPE, 59)
#define GRAMMAR_169 GRAMMAR(NO_EE, NO_XSI_TYPE, 60)
#define GRAMMAR_170 GRAMMAR(NO_EE, NO_XSI_TYPE, 61)
#define GRAMMAR_171 GRAMMAR(NO_EE, NO_XSI_TYPE, 62)
#define GRAMMAR_172 GRAMMAR(NO_EE, NO_XSI_TYPE, 63)
#define GRAMMAR_173 GRAMMAR(NO_EE, NO_XSI_TYPE, 64)
#define GRAMMAR_174 GRAMMAR(NO_EE, NO_XSI_TYPE, 65)
#define GRAMMAR_175 GRAMMAR(EE, NO_XSI_TYPE, 215)
#define GRAMMAR_176 GRAMMAR(NO_EE, NO_XSI_TYPE, 220)
#define GRAMMAR_177 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_178 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_179 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_180 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_181 GRAMMAR(EE, NO_XSI_TYPE, 72)
#define GRAMMAR_182 GRAMMAR(EE, NO_XSI_TYPE, 73)
#define GRAMMAR_183 GRAMMAR(EE, NO_XSI_TYPE, 74)
#define GRAMMAR_184 GRAMMAR(EE, NO_XSI_TYPE, 75)
#define GRAMMAR_185 GRAMMAR(EE, NO_XSI_TYPE, 76)
#define GRAMMAR_186 GRAMMAR(EE, NO_XSI_TYPE, 77)
#define GRAMMAR_187 GRAMMAR(EE, NO_XSI_TYPE, 78)
#define GRAMMAR_188 GRAMMAR(EE, NO_XSI_TYPE, 79)
#define GRAMMAR_189 GRAMMAR(EE, NO_XSI_TYPE, 80)
#define GRAMMAR_190 GRAMMAR(EE, NO_XSI_TYPE, 81)
#define GRAMMAR_191 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_192 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_193 GRAMMAR(NO_EE, NO_XSI_TYPE, 85)
#define GRAMMAR_194 GRAMMAR(EE, NO_XSI_TYPE, 222)
#define GRAMMAR_195 GRAMMAR(NO_EE, NO_XSI_TYPE, 224)
#define GRAMMAR_196 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_197 GRAMMAR(NO_EE, NO_XSI_TYPE, 90)
#define GRAMMAR_198 GRAMMAR(NO_EE, NO_XSI_TYPE, 226)
#define GRAMMAR_199 GRAMMAR(NO_EE, NO_XSI_TYPE, 228)
#define GRAMMAR_200 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_201 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_202 GRAMMAR(NO_EE, NO_XSI_TYPE, 95)
#define GRAMMAR_203 GRAMMAR(NO_EE, NO_XSI_TYPE, 230)
#define GRAMMAR_204 GRAMMAR(NO_EE, NO_XSI_TYPE, 97)
#define GRAMMAR_205 GRAMMAR(EE, NO_XSI_TYPE, 236)
#define GRAMMAR_206 GRAMMAR(NO_EE, NO_XSI_TYPE, 238)
#define GRAMMAR_207 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_208 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_209 GRAMMAR(NO_EE, NO_XSI_TYPE, 102)
#define GRAMMAR_210 GRAMMAR(NO_EE, NO_XSI_TYPE, 240)
#define GRAMMAR_211 GRAMMAR(NO_EE, NO_XSI_TYPE, 88)
#define GRAMMAR_212 GRAMMAR(EE, NO_XSI_TYPE, 104)
#define GRAMMAR_213 GRAMMAR(EE, NO_XSI_TYPE, 105)
#define GRAMMAR_214 GRAMMAR(EE, NO_XSI_TYPE, 108)
#define GRAMMAR_215 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_216 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_217 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_218 GRAMMAR(EE, NO_XSI_TYPE, 113)
#define GRAMMAR_219 GRAMMAR(EE, NO_XSI_TYPE, 114)
#define GRAMMAR_220 GRAMMAR(EE, NO_XSI_TYPE, 115)
#define GRAMMAR_221 GRAMMAR(EE, NO_XSI_TYPE, 116)
#define GRAMMAR_222 GRAMMAR(NO_EE, XSI_TYPE, 42)
#define GRAMMAR_223 GRAMMAR(EE, NO_XSI_TYPE, 117)
#define GRAMMAR_224 GRAMMAR(EE, NO_XSI_TYPE, 118)
#define GRAMMAR_225 GRAMMAR(EE, NO_XSI_TYPE, 119)
#define GRAMMAR_226 GRAMMAR(NO_EE, NO_XSI_TYPE, 190)
#define GRAMMAR_227 GRAMMAR(EE, NO_XSI_TYPE, 121)
#define GRAMMAR_228 GRAMMAR(EE, NO_XSI_TYPE, 122)
#define GRAMMAR_229 GRAMMAR(EE, NO_XSI_TYPE, 123)
#define GRAMMAR_230 GRAMMAR(EE, NO_XSI_TYPE, 124)
#define GRAMMAR_231 GRAMMAR(EE, NO_XSI_TYPE, 125)
#define GRAMMAR_232 GRAMMAR(NO_EE, NO_XSI_TYPE, 243)
#define GRAMMAR_233 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_234 GRAMMAR(NO_EE, NO_XSI_TYPE, 129)
#define GRAMMAR_235 GRAMMAR(NO_EE, NO_XSI_TYPE, 245)
#define GRAMMAR_236 GRAMMAR(NO_EE, NO_XSI_TYPE, 131)
#define GRAMMAR_237 GRAMMAR(NO_EE, NO_XSI_TYPE, 248)
#define GRAMMAR_238 GRAMMAR(NO_EE, NO_XSI_TYPE, 251)
#define GRAMMAR_239 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_240 GRAMMAR(EE, NO_XSI_TYPE, 135)
#define GRAMMAR_241 GRAMMAR(EE, NO_XSI_TYPE, 136)
#define GRAMMAR_242 GRAMMAR(EE, NO_XSI_TYPE, 137)
#define GRAMMAR_243 GRAMMAR(EE, NO_XSI_TYPE, 138)
#define GRAMMAR_244 GRAMMAR(EE, NO_XSI_TYPE, 139)
#define GRAMMAR_245 GRAMMAR(EE, NO_XSI_TYPE, 140)
#define GRAMMAR_246 GRAMMAR(EE, NO_XSI_TYPE, 141)
#define GRAMMAR_247 GRAMMAR(EE, NO_XSI_TYPE, 142)
#define GRAMMAR_248 GRAMMAR(EE, NO_XSI_TYPE, 143)
#define GRAMMAR_249 GRAMMAR(EE, NO_XSI_TYPE, 144)
#define GRAMMAR_250 GRAMMAR(EE, NO_XSI_TYPE, 145)
#define GRAMMAR_251 GRAMMAR(EE, NO_XSI_TYPE, 146)
#define GRAMMAR_252 GRAMMAR(EE, NO_XSI_TYPE, 147)
#define GRAMMAR_253 GRAMMAR(EE, NO_XSI_TYPE, 148)
#define GRAMMAR_254 GRAMMAR(EE, NO_XSI_TYPE, 149)
#define GRAMMAR_255 GRAMMAR(EE, NO_XSI_TYPE, 150)
#define GRAMMAR_256 GRAMMAR(NO_EE, NO_XSI_TYPE, 106)
#define GRAMMAR_257 GRAMMAR(EE, NO_XSI_TYPE, 151)
#define GRAMMAR_258 GRAMMAR(NO_EE, NO_XSI_TYPE, 253)
#define GRAMMAR_259 GRAMMAR(NO_EE, NO_XSI_TYPE, 254)
#define GRAMMAR_260 GRAMMAR(NO_EE, NO_XSI_TYPE, 154)
#define GRAMMAR_261 GRAMMAR(NO_EE, NO_XSI_TYPE, 155)
#define GRAMMAR_262 GRAMMAR(NO_EE, NO_XSI_TYPE, 255)
#define GRAMMAR_263 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_264 GRAMMAR(NO_EE, NO_XSI_TYPE, 158)
#define GRAMMAR_265 GRAMMAR(NO_EE, NO_XSI_TYPE, 159)
#define GRAMMAR_266 GRAMMAR(NO_EE, NO_XSI_TYPE, 160)
#define GRAMMAR_267 GRAMMAR(NO_EE, NO_XSI_TYPE, 161)
#define GRAMMAR_268 GRAMMAR(NO_EE, NO_XSI_TYPE, 162)
#define GRAMMAR_269 GRAMMAR(NO_EE, NO_XSI_TYPE, 163)
#define GRAMMAR_270 GRAMMAR(NO_EE, NO_XSI_TYPE, 164)
#define GRAMMAR_271 GRAMMAR(NO_EE, NO_XSI_TYPE, 165)
#define GRAMMAR_272 GRAMMAR(NO_EE, NO_XSI_TYPE, 166)
#define GRAMMAR_273 GRAMMAR(NO_EE, NO_XSI_TYPE, 167)
#define GRAMMAR_274 GRAMMAR(NO_EE, NO_XSI_TYPE, 168)
#define GRAMMAR_275 GRAMMAR(NO_EE, NO_XSI_TYPE, 12)
#define GRAMMAR_276 GRAMMAR(EE, NO_XSI_TYPE, 171)
#define GRAMMAR_277 GRAMMAR(NO_EE, XSI_TYPE, 190)
#define GRAMMAR_278 GRAMMAR(NO_EE, NO_XSI_TYPE, 257)
#define GRAMMAR_279 GRAMMAR(EE, NO_XSI_TYPE, 174)
#define GRAMMAR_280 GRAMMAR(NO_EE, NO_XSI_TYPE, 176)
#define GRAMMAR_281 GRAMMAR(NO_EE, NO_XSI_TYPE, 259)
#define GRAMMAR_282 GRAMMAR(NO_EE, NO_XSI_TYPE, 178)
#define GRAMMAR_283 GRAMMAR(NO_EE, NO_XSI_TYPE, 261)
#define GRAMMAR_284 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_285 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_286 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_287 GRAMMAR(NO_EE, NO_XSI_TYPE, 263)
#define GRAMMAR_288 GRAMMAR(NO_EE, NO_XSI_TYPE, 185)
#define GRAMMAR_289 GRAMMAR(NO_EE, NO_XSI_TYPE, 186)
#define GRAMMAR_290 GRAMMAR(NO_EE, NO_XSI_TYPE, 264)
#define GRAMMAR_291 GRAMMAR(NO_EE, NO_XSI_TYPE, 188)
#define GRAMMAR_292 GRAMMAR(NO_EE, NO_XSI_TYPE, 266)
#define GRAMMAR_293 GRAMMAR(NO_EE, NO_XSI_TYPE, 267)
#define GRAMMAR_294 GRAMMAR(NO_EE, NO_XSI_TYPE, 268)
#define GRAMMAR_295 GRAMMAR(NO_EE, NO_XSI_TYPE, 193)
#define GRAMMAR_296 GRAMMAR(NO_EE, NO_XSI_TYPE, 269)
#define GRAMMAR_297 GRAMMAR(NO_EE, NO_XSI_TYPE, 195)
#define GRAMMAR_298 GRAMMAR(NO_EE, NO_XSI_TYPE, 272)
#define GRAMMAR_299 GRAMMAR(NO_EE, NO_XSI_TYPE, 275)
#define GRAMMAR_300 GRAMMAR(NO_EE, NO_XSI_TYPE, 21)
#define GRAMMAR_301 GRAMMAR(NO_EE, XSI_TYPE, 106)
#define GRAMMAR_302 GRAMMAR(NO_EE, NO_XSI_TYPE, 277)
#define GRAMMAR_303 GRAMMAR(NO_EE, NO_XSI_TYPE, 202)
#define GRAMMAR_304 GRAMMAR(NO_EE, NO_XSI_TYPE, 203)
#define GRAMMAR_305 GRAMMAR(NO_EE, NO_XSI_TYPE, 204)
#define GRAMMAR_306 GRAMMAR(NO_EE, NO_XSI_TYPE, 88)
#define GRAMMAR_307 GRAMMAR(NO_EE, NO_XSI_TYPE, 278)
#define GRAMMAR_308 GRAMMAR(NO_EE, NO_XSI_TYPE, 279)
#define GRAMMAR_309 GRAMMAR(EE, NO_XSI_TYPE, 209)
#define GRAMMAR_310 GRAMMAR(EE, NO_XSI_TYPE, 210)
#define GRAMMAR_311 GRAMMAR(EE, NO_XSI_TYPE, 211)
#define GRAMMAR_312 GRAMMAR(EE, NO_XSI_TYPE, 211)
#define GRAMMAR_313 GRAMMAR(NO_EE, NO_XSI_TYPE, 214)
#define GRAMMAR_314 GRAMMAR(EE, NO_XSI_TYPE, 280)
#define GRAMMAR_315 GRAMMAR(EE, NO_XSI_TYPE, 216)
#define GRAMMAR_316 GRAMMAR(EE, NO_XSI_TYPE, 217)
#define GRAMMAR_317 GRAMMAR(EE, NO_XSI_TYPE, 218)
#define GRAMMAR_318 GRAMMAR(EE, NO_XSI_TYPE, 219)
#define GRAMMAR_319 GRAMMAR(NO_EE, NO_XSI_TYPE, 221)
#define GRAMMAR_320 GRAMMAR(EE, NO_XSI_TYPE, 286)
#define GRAMMAR_321 GRAMMAR(EE, NO_XSI_TYPE, 223)
#define GRAMMAR_322 GRAMMAR(NO_EE, NO_XSI_TYPE, 225)
#define GRAMMAR_323 GRAMMAR(NO_EE, NO_XSI_TYPE, 227)
#define GRAMMAR_324 GRAMMAR(NO_EE, NO_XSI_TYPE, 288)
#define GRAMMAR_325 GRAMMAR(NO_EE, NO_XSI_TYPE, 229)
#define GRAMMAR_326 GRAMMAR(EE, NO_XSI_TYPE, 289)
#define GRAMMAR_327 GRAMMAR(NO_EE, NO_XSI_TYPE, 231)
#define GRAMMAR_328 GRAMMAR(NO_EE, NO_XSI_TYPE, 232)
#define GRAMMAR_329 GRAMMAR(NO_EE, NO_XSI_TYPE, 233)
#define GRAMMAR_330 GRAMMAR(NO_EE, NO_XSI_TYPE, 234)
#define GRAMMAR_331 GRAMMAR(NO_EE, NO_XSI_TYPE, 235)
#define GRAMMAR_332 GRAMMAR(EE, NO_XSI_TYPE, 223)
#define GRAMMAR_333 GRAMMAR(NO_EE, NO_XSI_TYPE, 239)
#define GRAMMAR_334 GRAMMAR(EE, NO_XSI_TYPE, 291)
#define GRAMMAR_335 GRAMMAR(NO_EE, NO_XSI_TYPE, 241)
#define GRAMMAR_336 GRAMMAR(NO_EE, NO_XSI_TYPE, 242)
#define GRAMMAR_337 GRAMMAR(NO_EE, NO_XSI_TYPE, 293)
#define GRAMMAR_338 GRAMMAR(NO_EE, NO_XSI_TYPE, 244)
#define GRAMMAR_339 GRAMMAR(EE, NO_XSI_TYPE, 294)
#define GRAMMAR_340 GRAMMAR(NO_EE, NO_XSI_TYPE, 246)
#define GRAMMAR_341 GRAMMAR(NO_EE, NO_XSI_TYPE, 247)
#define GRAMMAR_342 GRAMMAR(EE, NO_XSI_TYPE, 296)
#define GRAMMAR_343 GRAMMAR(NO_EE, NO_XSI_TYPE, 249)
#define GRAMMAR_344 GRAMMAR(NO_EE, NO_XSI_TYPE, 250)
#define GRAMMAR_345 GRAMMAR(NO_EE, NO_XSI_TYPE, 252)
#define GRAMMAR_346 GRAMMAR(EE, NO_XSI_TYPE, 297)
#define GRAMMAR_347 GRAMMAR(NO_EE, NO_XSI_TYPE, 256)
#define GRAMMAR_348 GRAMMAR(NO_EE, NO_XSI_TYPE, 258)
#define GRAMMAR_349 GRAMMAR(EE, NO_XSI_TYPE, 174)
#define GRAMMAR_350 GRAMMAR(NO_EE, NO_XSI_TYPE, 260)
#define GRAMMAR_351 GRAMMAR(NO_EE, NO_XSI_TYPE, 299)
#define GRAMMAR_352 GRAMMAR(NO_EE, NO_XSI_TYPE, 262)
#define GRAMMAR_353 GRAMMAR(EE, NO_XSI_TYPE, 300)
#define GRAMMAR_354 GRAMMAR(NO_EE, NO_XSI_TYPE, 198)
#define GRAMMAR_355 GRAMMAR(NO_EE, NO_XSI_TYPE, 256)
#define GRAMMAR_356 GRAMMAR(NO_EE, NO_XSI_TYPE, 301)
#define GRAMMAR_357 GRAMMAR(NO_EE, NO_XSI_TYPE, 302)
#define GRAMMAR_358 GRAMMAR(NO_EE, NO_XSI_TYPE, 303)
#define GRAMMAR_359 GRAMMAR(NO_EE, NO_XSI_TYPE, 270)
#define GRAMMAR_360 GRAMMAR(NO_EE, NO_XSI_TYPE, 271)
#define GRAMMAR_361 GRAMMAR(NO_EE, NO_XSI_TYPE, 304)
#define GRAMMAR_362 GRAMMAR(NO_EE, NO_XSI_TYPE, 273)
#define GRAMMAR_363 GRAMMAR(NO_EE, NO_XSI_TYPE, 274)
#define GRAMMAR_364 GRAMMAR(NO_EE, NO_XSI_TYPE, 305)
#define GRAMMAR_365 GRAMMAR(NO_EE, NO_XSI_TYPE, 276)
#define GRAMMAR_366 GRAMMAR(EE, NO_XSI_TYPE, 306)
#define GRAMMAR_367 GRAMMAR(NO_EE, XSI_TYPE, 42)
#define GRAMMAR_368 GRAMMAR(NO_EE, NO_XSI_TYPE, 308)
#define GRAMMAR_369 GRAMMAR(EE, NO_XSI_TYPE, 281)
#define GRAMMAR_370 GRAMMAR(EE, NO_XSI_TYPE, 282)
#define GRAMMAR_371 GRAMMAR(EE, NO_XSI_TYPE, 283)
#define GRAMMAR_372 GRAMMAR(EE, NO_XSI_TYPE, 284)
#define GRAMMAR_373 GRAMMAR(EE, NO_XSI_TYPE, 285)
#define GRAMMAR_374 GRAMMAR(EE, NO_XSI_TYPE, 287)
#define GRAMMAR_375 GRAMMAR(EE, NO_XSI_TYPE, 287)
#define GRAMMAR_376 GRAMMAR(NO_EE, NO_XSI_TYPE, 309)
#define GRAMMAR_377 GRAMMAR(EE, NO_XSI_TYPE, 290)
#define GRAMMAR_378 GRAMMAR(EE, NO_XSI_TYPE, 290)
#define GRAMMAR_379 GRAMMAR(EE, NO_XSI_TYPE, 292)
#define GRAMMAR_380 GRAMMAR(EE, NO_XSI_TYPE, 292)
#define GRAMMAR_381 GRAMMAR(EE, NO_XSI_TYPE, 295)
#define GRAMMAR_382 GRAMMAR(EE, NO_XSI_TYPE, 295)
#define GRAMMAR_383 GRAMMAR(EE, NO_XSI_TYPE, 298)
#define GRAMMAR_384 GRAMMAR(EE, NO_XSI_TYPE, 298)
#define GRAMMAR_385 GRAMMAR(NO_EE, NO_XSI_TYPE, 310)
#define GRAMMAR_386 GRAMMAR(NO_EE, NO_XSI_TYPE, 88)
#define GRAMMAR_387 GRAMMAR(EE, NO_XSI_TYPE, 300)
#define GRAMMAR_388 GRAMMAR(NO_EE, NO_XSI_TYPE, 311)
#define GRAMMAR_389 GRAMMAR(NO_EE, NO_XSI_TYPE, 312)
#define GRAMMAR_390 GRAMMAR(NO_EE, XSI_TYPE, 190)
#define GRAMMAR_391 GRAMMAR(NO_EE, NO_XSI_TYPE, 313)
#define GRAMMAR_392 GRAMMAR(NO_EE, NO_XSI_TYPE, 314)
#define GRAMMAR_393 GRAMMAR(EE, NO_XSI_TYPE, 307)
#define GRAMMAR_394 GRAMMAR(EE, NO_XSI_TYPE, 307)
#define GRAMMAR_395 GRAMMAR(NO_EE, NO_XSI_TYPE, 315)
#define GRAMMAR_396 GRAMMAR(NO_EE, NO_XSI_TYPE, 317)
#define GRAMMAR_397 GRAMMAR(NO_EE, NO_XSI_TYPE, 318)
#define GRAMMAR_398 GRAMMAR(NO_EE, NO_XSI_TYPE, 319)
#define GRAMMAR_399 GRAMMAR(EE, NO_XSI_TYPE, 321)
#define GRAMMAR_400 GRAMMAR(NO_EE, NO_XSI_TYPE, 316)
#define GRAMMAR_401 GRAMMAR(NO_EE, NO_XSI_TYPE, 322)
#define GRAMMAR_402 GRAMMAR(NO_EE, NO_XSI_TYPE, 323)
#define GRAMMAR_403 GRAMMAR(NO_EE, NO_XSI_TYPE, 320)
#define GRAMMAR_404 GRAMMAR(NO_EE, NO_XSI_TYPE, 312)
#define GRAMMAR_405 GRAMMAR(NO_EE, NO_XSI_TYPE, 324)
#define GRAMMAR_406 GRAMMAR(NO_EE, NO_XSI_TYPE, 325)
#define GRAMMAR_407 GRAMMAR(NO_EE, NO_XSI_TYPE, 326)
#define GRAMMAR_408 GRAMMAR(NO_EE, NO_XSI_TYPE, 327)
#define GRAMMAR_409 GRAMMAR(NO_EE, NO_XSI_TYPE, 328)

static EmberExiGrammarProduction productions[] = {
// Production count: 329
  RULE(AT, STRING, href, 0, GRAMMAR_112), // 0
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_113, 8), // 1
  SE_RULE(ConfigurationLink, 0, GRAMMAR_114, GRAMMAR_9), // 2
  SE_RULE(DERListLink, 0, GRAMMAR_115, GRAMMAR_12), // 3
  SE_RULE(DeviceInformationLink, 0, GRAMMAR_116, GRAMMAR_21), // 4
  SE_RULE(DeviceStatusLink, 0, GRAMMAR_117, GRAMMAR_23), // 5
  SE_RULE(FileStatusLink, 0, GRAMMAR_118, GRAMMAR_31), // 6
  SE_RULE(IPInterfaceListLink, 0, GRAMMAR_119, GRAMMAR_37), // 7
  SE_RULE(LoadShedAvailabilityLink, 0, GRAMMAR_120, GRAMMAR_43), // 8
  SE_RULE(loadShedDeviceCategory, 0, GRAMMAR_121, GRAMMAR_19), // 9
  SE_RULE(LogEventListLink, 0, GRAMMAR_122, GRAMMAR_47), // 10
  SE_RULE(PowerStatusLink, 0, GRAMMAR_123, GRAMMAR_61), // 11
  SE_RULE(sFDI, 1, GRAMMAR_124, GRAMMAR_82), // 12
  NBIT_RULE(CH, NONE, 1, GRAMMAR_124, 8), // 13
  SE_RULE(multiplier, 1, GRAMMAR_125, GRAMMAR_59), // 14
  SE_RULE(type, 1, GRAMMAR_124, GRAMMAR_4), // 15
  SE_RULE(type, 1, GRAMMAR_126, GRAMMAR_103), // 16
  SE_RULE(attributeIdentifier, 1, GRAMMAR_127, GRAMMAR_128), // 17
  RULE(AT, STRING, href, 0, GRAMMAR_129), // 18
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_130, 8), // 19
  SE_RULE(currentLocale, 1, GRAMMAR_131, GRAMMAR_44), // 20
  RULE(AT, STRING, href, 1, GRAMMAR_124), // 21
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_132), // 22
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_133), // 23
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_134), // 24
  SE_RULE(averageEnergy, 1, GRAMMAR_135, GRAMMAR_76), // 25
  SE_RULE(duration, 1, GRAMMAR_136, GRAMMAR_137), // 26
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_138), // 27
  RULE(AT, STRING, href, 0, GRAMMAR_139), // 28
  SE_RULE(CustomerAccountListLink, 0, GRAMMAR_140, GRAMMAR_11), // 29
  SE_RULE(DemandResponseProgramListLink, 0, GRAMMAR_141, GRAMMAR_17), // 30
  SE_RULE(DERProgramListLink, 0, GRAMMAR_142, GRAMMAR_13), // 31
  SE_RULE(FileListLink, 0, GRAMMAR_143, GRAMMAR_30), // 32
  SE_RULE(MessagingProgramListLink, 0, GRAMMAR_144, GRAMMAR_48), // 33
  SE_RULE(PrepaymentListLink, 0, GRAMMAR_145, GRAMMAR_62), // 34
  SE_RULE(ResponseSetListLink, 0, GRAMMAR_146, GRAMMAR_80), // 35
  SE_RULE(TariffProfileListLink, 0, GRAMMAR_147, GRAMMAR_95), // 36
  SE_RULE(TimeLink, 0, GRAMMAR_148, GRAMMAR_100), // 37
  SE_RULE(UsagePointListLink, 0, GRAMMAR_149, GRAMMAR_109), // 38
  SE_RULE(EndDeviceListLink, 0, GRAMMAR_150, GRAMMAR_29), // 39
  SE_RULE(MirrorUsagePointListLink, 0, GRAMMAR_151, GRAMMAR_53), // 40
  SE_RULE(SelfDeviceLink, 1, GRAMMAR_124, GRAMMAR_84), // 41
  RULE(CH, BINARY, NONE, 1, GRAMMAR_124), // 42
  RULE(AT, STRING, href, 0, GRAMMAR_152), // 43
  SE_RULE(DRLCCapabilities, 0, GRAMMAR_153, GRAMMAR_14), // 44
  SE_RULE(functionsImplemented, 0, GRAMMAR_154, GRAMMAR_155), // 45
  SE_RULE(lFDI, 1, GRAMMAR_156, GRAMMAR_157), // 46
  RULE(AT, STRING, href, 0, GRAMMAR_158), // 47
  SE_RULE(changedTime, 1, GRAMMAR_159, GRAMMAR_102), // 48
  RULE(AT, STRING, href, 0, GRAMMAR_160), // 49
  SE_RULE(createdDateTime, 0, GRAMMAR_161, GRAMMAR_102), // 50
  SE_RULE(endDeviceLFDI, 1, GRAMMAR_162, GRAMMAR_157), // 51
  SE_RULE(normalValue, 1, GRAMMAR_124, GRAMMAR_128), // 52
  RULE(AT, STRING, href, 0, GRAMMAR_163), // 53
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_164, 8), // 54
  SE_RULE(ConfigurationLink, 0, GRAMMAR_165, GRAMMAR_9), // 55
  SE_RULE(DERListLink, 0, GRAMMAR_166, GRAMMAR_12), // 56
  SE_RULE(DeviceInformationLink, 0, GRAMMAR_167, GRAMMAR_21), // 57
  SE_RULE(DeviceStatusLink, 0, GRAMMAR_168, GRAMMAR_23), // 58
  SE_RULE(FileStatusLink, 0, GRAMMAR_169, GRAMMAR_31), // 59
  SE_RULE(IPInterfaceListLink, 0, GRAMMAR_170, GRAMMAR_37), // 60
  SE_RULE(LoadShedAvailabilityLink, 0, GRAMMAR_171, GRAMMAR_43), // 61
  SE_RULE(loadShedDeviceCategory, 0, GRAMMAR_172, GRAMMAR_19), // 62
  SE_RULE(LogEventListLink, 0, GRAMMAR_173, GRAMMAR_47), // 63
  SE_RULE(PowerStatusLink, 0, GRAMMAR_174, GRAMMAR_61), // 64
  SE_RULE(sFDI, 1, GRAMMAR_175, GRAMMAR_82), // 65
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_176), // 66
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_177), // 67
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_178), // 68
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_179), // 69
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_180), // 70
  RULE(AT, STRING, href, 0, GRAMMAR_181), // 71
  SE_RULE(CustomerAccountListLink, 0, GRAMMAR_182, GRAMMAR_11), // 72
  SE_RULE(DemandResponseProgramListLink, 0, GRAMMAR_183, GRAMMAR_17), // 73
  SE_RULE(DERProgramListLink, 0, GRAMMAR_184, GRAMMAR_13), // 74
  SE_RULE(FileListLink, 0, GRAMMAR_185, GRAMMAR_30), // 75
  SE_RULE(MessagingProgramListLink, 0, GRAMMAR_186, GRAMMAR_48), // 76
  SE_RULE(PrepaymentListLink, 0, GRAMMAR_187, GRAMMAR_62), // 77
  SE_RULE(ResponseSetListLink, 0, GRAMMAR_188, GRAMMAR_80), // 78
  SE_RULE(TariffProfileListLink, 0, GRAMMAR_189, GRAMMAR_95), // 79
  SE_RULE(TimeLink, 0, GRAMMAR_190, GRAMMAR_100), // 80
  SE_RULE(UsagePointListLink, 1, GRAMMAR_124, GRAMMAR_109), // 81
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_191), // 82
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_192), // 83
  RULE(AT, STRING, href, 0, GRAMMAR_193), // 84
  SE_RULE(mRID, 1, GRAMMAR_194, GRAMMAR_111), // 85
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_195), // 86
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_196), // 87
  RULE(CH, STRING, NONE, 1, GRAMMAR_124), // 88
  RULE(AT, STRING, href, 0, GRAMMAR_197), // 89
  SE_RULE(createdDateTime, 1, GRAMMAR_198, GRAMMAR_102), // 90
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_199), // 91
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_200), // 92
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_201), // 93
  RULE(AT, STRING, href, 0, GRAMMAR_202), // 94
  SE_RULE(mRID, 1, GRAMMAR_203, GRAMMAR_111), // 95
  RULE(AT, STRING, href, 0, GRAMMAR_204), // 96
  SE_RULE(mRID, 1, GRAMMAR_205, GRAMMAR_111), // 97
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_206), // 98
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_207), // 99
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_208), // 100
  RULE(AT, STRING, href, 0, GRAMMAR_209), // 101
  SE_RULE(subscribedResource, 1, GRAMMAR_210, GRAMMAR_211), // 102
  SE_RULE(coolingOffset, 0, GRAMMAR_212, GRAMMAR_128), // 103
  SE_RULE(heatingOffset, 0, GRAMMAR_213, GRAMMAR_128), // 104
  SE_RULE(loadAdjustmentPercentageOffset, 1, GRAMMAR_124, GRAMMAR_128), // 105
  RULE(CH, UNSIGNED_INTEGER, NONE, 1, GRAMMAR_124), // 106
  SE_RULE(batteryInstallTime, 0, GRAMMAR_214, GRAMMAR_102), // 107
  SE_RULE(lowChargeThreshold, 1, GRAMMAR_124, GRAMMAR_137), // 108
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_215), // 109
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_216), // 110
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_217), // 111
  RULE(AT, STRING, href, 0, GRAMMAR_218), // 112
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_219, 8), // 113
  SE_RULE(consumptionBlock, 0, GRAMMAR_220, GRAMMAR_10), // 114
  SE_RULE(qualityFlags, 0, GRAMMAR_221, GRAMMAR_222), // 115
  SE_RULE(timePeriod, 0, GRAMMAR_223, GRAMMAR_16), // 116
  SE_RULE(touTier, 0, GRAMMAR_224, GRAMMAR_94), // 117
  SE_RULE(value, 0, GRAMMAR_225, GRAMMAR_226), // 118
  SE_RULE(localID, 1, GRAMMAR_124, GRAMMAR_222), // 119
  RULE(AT, STRING, href, 0, GRAMMAR_227), // 120
  SE_RULE(consumptionBlock, 0, GRAMMAR_228, GRAMMAR_10), // 121
  SE_RULE(qualityFlags, 0, GRAMMAR_229, GRAMMAR_222), // 122
  SE_RULE(timePeriod, 0, GRAMMAR_230, GRAMMAR_16), // 123
  SE_RULE(touTier, 0, GRAMMAR_231, GRAMMAR_94), // 124
  SE_RULE(value, 1, GRAMMAR_124, GRAMMAR_226), // 125
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_232), // 126
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_233), // 127
  RULE(AT, STRING, href, 0, GRAMMAR_234), // 128
  SE_RULE(mRID, 1, GRAMMAR_235, GRAMMAR_111), // 129
  RULE(AT, STRING, href, 0, GRAMMAR_236), // 130
  SE_RULE(mRID, 1, GRAMMAR_237, GRAMMAR_111), // 131
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_238), // 132
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_239), // 133
  RULE(AT, STRING, href, 0, GRAMMAR_240), // 134
  SE_RULE(accumulationBehaviour, 0, GRAMMAR_241, GRAMMAR_1), // 135
  SE_RULE(calorificValue, 0, GRAMMAR_242, GRAMMAR_104), // 136
  SE_RULE(commodity, 0, GRAMMAR_243, GRAMMAR_6), // 137
  SE_RULE(conversionFactor, 0, GRAMMAR_244, GRAMMAR_104), // 138
  SE_RULE(dataQualifier, 0, GRAMMAR_245, GRAMMAR_15), // 139
  SE_RULE(flowDirection, 0, GRAMMAR_246, GRAMMAR_32), // 140
  SE_RULE(intervalLength, 0, GRAMMAR_247, GRAMMAR_137), // 141
  SE_RULE(kind, 0, GRAMMAR_248, GRAMMAR_39), // 142
  SE_RULE(maxNumberOfIntervals, 0, GRAMMAR_249, GRAMMAR_128), // 143
  SE_RULE(numberOfConsumptionBlocks, 0, GRAMMAR_250, GRAMMAR_128), // 144
  SE_RULE(numberOfTouTiers, 0, GRAMMAR_251, GRAMMAR_128), // 145
  SE_RULE(phase, 0, GRAMMAR_252, GRAMMAR_57), // 146
  SE_RULE(powerOfTenMultiplier, 0, GRAMMAR_253, GRAMMAR_59), // 147
  SE_RULE(subIntervalLength, 0, GRAMMAR_254, GRAMMAR_137), // 148
  SE_RULE(supplyLimit, 0, GRAMMAR_255, GRAMMAR_256), // 149
  SE_RULE(tieredConsumptionBlocks, 0, GRAMMAR_257, GRAMMAR_258), // 150
  SE_RULE(uom, 1, GRAMMAR_124, GRAMMAR_105), // 151
  SE_RULE(multiplier, 1, GRAMMAR_259, GRAMMAR_59), // 152
  RULE(AT, STRING, href, 0, GRAMMAR_260), // 153
  SE_RULE(createdDateTime, 0, GRAMMAR_261, GRAMMAR_102), // 154
  SE_RULE(endDeviceLFDI, 1, GRAMMAR_262, GRAMMAR_157), // 155
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_263), // 156
  RULE(AT, STRING, href, 0, GRAMMAR_264), // 157
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_265, 8), // 158
  SE_RULE(ConfigurationLink, 0, GRAMMAR_266, GRAMMAR_9), // 159
  SE_RULE(DERListLink, 0, GRAMMAR_267, GRAMMAR_12), // 160
  SE_RULE(DeviceInformationLink, 0, GRAMMAR_268, GRAMMAR_21), // 161
  SE_RULE(DeviceStatusLink, 0, GRAMMAR_269, GRAMMAR_23), // 162
  SE_RULE(FileStatusLink, 0, GRAMMAR_270, GRAMMAR_31), // 163
  SE_RULE(IPInterfaceListLink, 0, GRAMMAR_271, GRAMMAR_37), // 164
  SE_RULE(LoadShedAvailabilityLink, 0, GRAMMAR_272, GRAMMAR_43), // 165
  SE_RULE(loadShedDeviceCategory, 0, GRAMMAR_273, GRAMMAR_19), // 166
  SE_RULE(LogEventListLink, 0, GRAMMAR_274, GRAMMAR_47), // 167
  SE_RULE(PowerStatusLink, 0, GRAMMAR_275, GRAMMAR_61), // 168
  SE_RULE(sFDI, 1, GRAMMAR_124, GRAMMAR_82), // 169
  SE_RULE(coolingSetpoint, 0, GRAMMAR_276, GRAMMAR_277), // 170
  SE_RULE(heatingSetpoint, 1, GRAMMAR_124, GRAMMAR_277), // 171
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_278), // 172
  RULE(AT, STRING, href, 0, GRAMMAR_279), // 173
  NBIT_RULE(AT, subscribable, 1, GRAMMAR_124, 8), // 174
  RULE(AT, STRING, href, 0, GRAMMAR_280), // 175
  SE_RULE(subscribedResource, 1, GRAMMAR_281, GRAMMAR_211), // 176
  RULE(AT, STRING, href, 0, GRAMMAR_282), // 177
  SE_RULE(subscribedResource, 1, GRAMMAR_124, GRAMMAR_211), // 178
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_283), // 179
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_284), // 180
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_285), // 181
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_286), // 182
  SE_RULE(multiplier, 1, GRAMMAR_287, GRAMMAR_59), // 183
  RULE(AT, STRING, href, 0, GRAMMAR_288), // 184
  SE_RULE(createdDateTime, 0, GRAMMAR_289, GRAMMAR_102), // 185
  SE_RULE(endDeviceLFDI, 1, GRAMMAR_290, GRAMMAR_157), // 186
  RULE(AT, STRING, href, 0, GRAMMAR_291), // 187
  SE_RULE(currentTime, 1, GRAMMAR_292, GRAMMAR_102), // 188
  SE_RULE(dstEndRule, 1, GRAMMAR_293, GRAMMAR_25), // 189
  RULE(CH, INTEGER, NONE, 1, GRAMMAR_124), // 190
  SE_RULE(multiplier, 1, GRAMMAR_294, GRAMMAR_59), // 191
  RULE(AT, STRING, href, 0, GRAMMAR_295), // 192
  SE_RULE(mRID, 1, GRAMMAR_296, GRAMMAR_111), // 193
  RULE(AT, STRING, href, 0, GRAMMAR_297), // 194
  SE_RULE(mRID, 1, GRAMMAR_298, GRAMMAR_111), // 195
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_299), // 196
  RULE(AT, UNSIGNED_INTEGER, all, 1, GRAMMAR_300), // 197
  SE_RULE(value, 1, GRAMMAR_124, GRAMMAR_277), // 198
  SE_RULE(value, 1, GRAMMAR_124, GRAMMAR_301), // 199
  SE_RULE(lowerThreshold, 1, GRAMMAR_302, GRAMMAR_226), // 200
  SE_RULE(PowerConfiguration, 0, GRAMMAR_303, GRAMMAR_58), // 201
  SE_RULE(PriceResponseCfgListLink, 0, GRAMMAR_304, GRAMMAR_63), // 202
  SE_RULE(TimeConfiguration, 0, GRAMMAR_305, GRAMMAR_99), // 203
  SE_RULE(userDeviceName, 1, GRAMMAR_124, GRAMMAR_306), // 204
  SE_RULE(maxDemand, 1, GRAMMAR_307, GRAMMAR_2), // 205
  SE_RULE(start, 1, GRAMMAR_124, GRAMMAR_102), // 206
  SE_RULE(mfDate, 1, GRAMMAR_308, GRAMMAR_102), // 207
  SE_RULE(onCount, 0, GRAMMAR_309, GRAMMAR_301), // 208
  SE_RULE(opState, 0, GRAMMAR_310, GRAMMAR_128), // 209
  SE_RULE(opTime, 0, GRAMMAR_311, GRAMMAR_137), // 210
  SE_RULE(Temperature, 0, GRAMMAR_312, GRAMMAR_96), // 211
  SE_RULE(TimeLink, 1, GRAMMAR_124, GRAMMAR_100), // 212
  SE_RULE(status, 0, GRAMMAR_313, GRAMMAR_128), // 213
  SE_RULE(subject, 1, GRAMMAR_314, GRAMMAR_111), // 214
  SE_RULE(FlowReservationRequestListLink, 0, GRAMMAR_315, GRAMMAR_33), // 215
  SE_RULE(FlowReservationResponseListLink, 0, GRAMMAR_316, GRAMMAR_34), // 216
  SE_RULE(FunctionSetAssignmentsListLink, 0, GRAMMAR_317, GRAMMAR_36), // 217
  SE_RULE(RegistrationLink, 0, GRAMMAR_318, GRAMMAR_77), // 218
  SE_RULE(SubscriptionListLink, 1, GRAMMAR_124, GRAMMAR_92), // 219
  RULE(AT, STRING, href, 0, GRAMMAR_319), // 220
  NBIT_RULE(AT, results, 1, GRAMMAR_320, 8), // 221
  SE_RULE(description, 0, GRAMMAR_321, GRAMMAR_306), // 222
  SE_RULE(version, 1, GRAMMAR_124, GRAMMAR_110), // 223
  RULE(AT, STRING, href, 0, GRAMMAR_322), // 224
  NBIT_RULE(AT, results, 1, GRAMMAR_124, 8), // 225
  SE_RULE(extendedData, 0, GRAMMAR_323, GRAMMAR_137), // 226
  SE_RULE(functionSet, 1, GRAMMAR_324, GRAMMAR_128), // 227
  RULE(AT, STRING, href, 0, GRAMMAR_325), // 228
  NBIT_RULE(AT, results, 1, GRAMMAR_326, 8), // 229
  SE_RULE(description, 0, GRAMMAR_327, GRAMMAR_306), // 230
  SE_RULE(version, 0, GRAMMAR_328, GRAMMAR_110), // 231
  SE_RULE(RateComponentListLink, 0, GRAMMAR_329, GRAMMAR_64), // 232
  SE_RULE(ReadingLink, 0, GRAMMAR_330, GRAMMAR_67), // 233
  SE_RULE(ReadingSetListLink, 0, GRAMMAR_331, GRAMMAR_73), // 234
  SE_RULE(ReadingTypeLink, 1, GRAMMAR_124, GRAMMAR_75), // 235
  SE_RULE(description, 0, GRAMMAR_332, GRAMMAR_306), // 236
  SE_RULE(version, 1, GRAMMAR_124, GRAMMAR_110), // 237
  RULE(AT, STRING, href, 0, GRAMMAR_333), // 238
  NBIT_RULE(AT, results, 1, GRAMMAR_334, 8), // 239
  SE_RULE(newResourceURI, 0, GRAMMAR_335, GRAMMAR_211), // 240
  SE_RULE(Resource, 0, GRAMMAR_336, GRAMMAR_78), // 241
  SE_RULE(status, 1, GRAMMAR_337, GRAMMAR_128), // 242
  RULE(AT, STRING, href, 0, GRAMMAR_338), // 243
  NBIT_RULE(AT, results, 1, GRAMMAR_339, 8), // 244
  SE_RULE(description, 0, GRAMMAR_340, GRAMMAR_306), // 245
  SE_RULE(version, 0, GRAMMAR_341, GRAMMAR_110), // 246
  SE_RULE(timePeriod, 1, GRAMMAR_342, GRAMMAR_16), // 247
  SE_RULE(description, 0, GRAMMAR_343, GRAMMAR_306), // 248
  SE_RULE(version, 0, GRAMMAR_344, GRAMMAR_110), // 249
  SE_RULE(timePeriod, 1, GRAMMAR_124, GRAMMAR_16), // 250
  RULE(AT, STRING, href, 0, GRAMMAR_345), // 251
  NBIT_RULE(AT, results, 1, GRAMMAR_346, 8), // 252
  RULE(CH, BOOLEAN, NONE, 1, GRAMMAR_124), // 253
  SE_RULE(value, 1, GRAMMAR_124, GRAMMAR_256), // 254
  SE_RULE(status, 0, GRAMMAR_347, GRAMMAR_128), // 255
  SE_RULE(subject, 1, GRAMMAR_124, GRAMMAR_111), // 256
  RULE(AT, STRING, href, 0, GRAMMAR_348), // 257
  NBIT_RULE(AT, results, 1, GRAMMAR_349, 8), // 258
  SE_RULE(Condition, 0, GRAMMAR_350, GRAMMAR_7), // 259
  SE_RULE(encoding, 1, GRAMMAR_351, GRAMMAR_128), // 260
  RULE(AT, STRING, href, 0, GRAMMAR_352), // 261
  NBIT_RULE(AT, results, 1, GRAMMAR_353, 8), // 262
  SE_RULE(subject, 1, GRAMMAR_354, GRAMMAR_128), // 263
  SE_RULE(status, 0, GRAMMAR_355, GRAMMAR_128), // 264
  SE_RULE(subject, 1, GRAMMAR_124, GRAMMAR_111), // 265
  SE_RULE(dstEndTime, 1, GRAMMAR_356, GRAMMAR_102), // 266
  SE_RULE(dstOffset, 1, GRAMMAR_357, GRAMMAR_101), // 267
  SE_RULE(unit, 1, GRAMMAR_358, GRAMMAR_105), // 268
  SE_RULE(description, 0, GRAMMAR_359, GRAMMAR_306), // 269
  SE_RULE(version, 0, GRAMMAR_360, GRAMMAR_110), // 270
  SE_RULE(roleFlags, 1, GRAMMAR_361, GRAMMAR_81), // 271
  SE_RULE(description, 0, GRAMMAR_362, GRAMMAR_306), // 272
  SE_RULE(version, 0, GRAMMAR_363, GRAMMAR_110), // 273
  SE_RULE(roleFlags, 1, GRAMMAR_364, GRAMMAR_81), // 274
  RULE(AT, STRING, href, 0, GRAMMAR_365), // 275
  NBIT_RULE(AT, results, 1, GRAMMAR_366, 8), // 276
  SE_RULE(upperThreshold, 1, GRAMMAR_124, GRAMMAR_226), // 277
  SE_RULE(optionsImplemented, 1, GRAMMAR_124, GRAMMAR_367), // 278
  SE_RULE(mfHwVer, 1, GRAMMAR_368, GRAMMAR_306), // 279
  SE_RULE(ApplianceLoadReduction, 0, GRAMMAR_369, GRAMMAR_3), // 280
  SE_RULE(AppliedTargetReduction, 0, GRAMMAR_370, GRAMMAR_5), // 281
  SE_RULE(DutyCycle, 0, GRAMMAR_371, GRAMMAR_26), // 282
  SE_RULE(Offset, 0, GRAMMAR_372, GRAMMAR_55), // 283
  SE_RULE(overrideDuration, 0, GRAMMAR_373, GRAMMAR_301), // 284
  SE_RULE(SetPoint, 1, GRAMMAR_124, GRAMMAR_86), // 285
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_374, 8), // 286
  SE_RULE(EndDevice, 1, GRAMMAR_375, GRAMMAR_27), // 287
  SE_RULE(logEventCode, 1, GRAMMAR_376, GRAMMAR_128), // 288
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_377, 8), // 289
  SE_RULE(LogEvent, 1, GRAMMAR_378, GRAMMAR_45), // 290
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_379, 8), // 291
  SE_RULE(MeterReading, 1, GRAMMAR_380, GRAMMAR_49), // 292
  SE_RULE(subscriptionURI, 1, GRAMMAR_124, GRAMMAR_211), // 293
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_381, 8), // 294
  SE_RULE(Reading, 1, GRAMMAR_382, GRAMMAR_65), // 295
  SE_RULE(ReadingListLink, 1, GRAMMAR_124, GRAMMAR_69), // 296
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_383, 8), // 297
  SE_RULE(ReadingSet, 1, GRAMMAR_384, GRAMMAR_70), // 298
  SE_RULE(level, 1, GRAMMAR_385, GRAMMAR_386), // 299
  SE_RULE(Subscription, 1, GRAMMAR_387, GRAMMAR_89), // 300
  SE_RULE(dstOffset, 1, GRAMMAR_388, GRAMMAR_101), // 301
  SE_RULE(dstStartRule, 1, GRAMMAR_389, GRAMMAR_25), // 302
  SE_RULE(value, 1, GRAMMAR_124, GRAMMAR_390), // 303
  SE_RULE(serviceCategoryKind, 1, GRAMMAR_391, GRAMMAR_85), // 304
  SE_RULE(serviceCategoryKind, 1, GRAMMAR_392, GRAMMAR_85), // 305
  NBIT_RULE(AT, subscribable, 0, GRAMMAR_393, 8), // 306
  SE_RULE(UsagePoint, 1, GRAMMAR_394, GRAMMAR_106), // 307
  SE_RULE(mfID, 1, GRAMMAR_395, GRAMMAR_56), // 308
  SE_RULE(logEventID, 1, GRAMMAR_396, GRAMMAR_301), // 309
  SE_RULE(limit, 1, GRAMMAR_397, GRAMMAR_301), // 310
  SE_RULE(dstStartTime, 1, GRAMMAR_398, GRAMMAR_102), // 311
  SE_RULE(tzOffset, 1, GRAMMAR_124, GRAMMAR_101), // 312
  SE_RULE(status, 1, GRAMMAR_399, GRAMMAR_128), // 313
  SE_RULE(status, 1, GRAMMAR_124, GRAMMAR_128), // 314
  SE_RULE(mfInfo, 0, GRAMMAR_400, GRAMMAR_306), // 315
  SE_RULE(mfModel, 1, GRAMMAR_401, GRAMMAR_306), // 316
  SE_RULE(logEventPEN, 1, GRAMMAR_402, GRAMMAR_56), // 317
  SE_RULE(notificationURI, 1, GRAMMAR_124, GRAMMAR_211), // 318
  SE_RULE(localTime, 0, GRAMMAR_403, GRAMMAR_102), // 319
  SE_RULE(quality, 1, GRAMMAR_404, GRAMMAR_128), // 320
  SE_RULE(MeterReadingListLink, 1, GRAMMAR_124, GRAMMAR_52), // 321
  SE_RULE(mfSerNum, 1, GRAMMAR_405, GRAMMAR_306), // 322
  SE_RULE(profileID, 1, GRAMMAR_124, GRAMMAR_128), // 323
  SE_RULE(primaryPower, 1, GRAMMAR_406, GRAMMAR_60), // 324
  SE_RULE(secondaryPower, 1, GRAMMAR_407, GRAMMAR_60), // 325
  SE_RULE(SupportedLocaleListLink, 0, GRAMMAR_408, GRAMMAR_93), // 326
  SE_RULE(swActTime, 1, GRAMMAR_409, GRAMMAR_102), // 327
  SE_RULE(swVer, 1, GRAMMAR_124, GRAMMAR_306), // 328
};

static const EmberExiGrammar grammars[] = {

// Grammar count: 410
  GRAMMAR_0,
  GRAMMAR_1,
  GRAMMAR_2,
  GRAMMAR_3,
  GRAMMAR_4,
  GRAMMAR_5,
  GRAMMAR_6,
  GRAMMAR_7,
  GRAMMAR_8,
  GRAMMAR_9,
  GRAMMAR_10,
  GRAMMAR_11,
  GRAMMAR_12,
  GRAMMAR_13,
  GRAMMAR_14,
  GRAMMAR_15,
  GRAMMAR_16,
  GRAMMAR_17,
  GRAMMAR_18,
  GRAMMAR_19,
  GRAMMAR_20,
  GRAMMAR_21,
  GRAMMAR_22,
  GRAMMAR_23,
  GRAMMAR_24,
  GRAMMAR_25,
  GRAMMAR_26,
  GRAMMAR_27,
  GRAMMAR_28,
  GRAMMAR_29,
  GRAMMAR_30,
  GRAMMAR_31,
  GRAMMAR_32,
  GRAMMAR_33,
  GRAMMAR_34,
  GRAMMAR_35,
  GRAMMAR_36,
  GRAMMAR_37,
  GRAMMAR_38,
  GRAMMAR_39,
  GRAMMAR_40,
  GRAMMAR_41,
  GRAMMAR_42,
  GRAMMAR_43,
  GRAMMAR_44,
  GRAMMAR_45,
  GRAMMAR_46,
  GRAMMAR_47,
  GRAMMAR_48,
  GRAMMAR_49,
  GRAMMAR_50,
  GRAMMAR_51,
  GRAMMAR_52,
  GRAMMAR_53,
  GRAMMAR_54,
  GRAMMAR_55,
  GRAMMAR_56,
  GRAMMAR_57,
  GRAMMAR_58,
  GRAMMAR_59,
  GRAMMAR_60,
  GRAMMAR_61,
  GRAMMAR_62,
  GRAMMAR_63,
  GRAMMAR_64,
  GRAMMAR_65,
  GRAMMAR_66,
  GRAMMAR_67,
  GRAMMAR_68,
  GRAMMAR_69,
  GRAMMAR_70,
  GRAMMAR_71,
  GRAMMAR_72,
  GRAMMAR_73,
  GRAMMAR_74,
  GRAMMAR_75,
  GRAMMAR_76,
  GRAMMAR_77,
  GRAMMAR_78,
  GRAMMAR_79,
  GRAMMAR_80,
  GRAMMAR_81,
  GRAMMAR_82,
  GRAMMAR_83,
  GRAMMAR_84,
  GRAMMAR_85,
  GRAMMAR_86,
  GRAMMAR_87,
  GRAMMAR_88,
  GRAMMAR_89,
  GRAMMAR_90,
  GRAMMAR_91,
  GRAMMAR_92,
  GRAMMAR_93,
  GRAMMAR_94,
  GRAMMAR_95,
  GRAMMAR_96,
  GRAMMAR_97,
  GRAMMAR_98,
  GRAMMAR_99,
  GRAMMAR_100,
  GRAMMAR_101,
  GRAMMAR_102,
  GRAMMAR_103,
  GRAMMAR_104,
  GRAMMAR_105,
  GRAMMAR_106,
  GRAMMAR_107,
  GRAMMAR_108,
  GRAMMAR_109,
  GRAMMAR_110,
  GRAMMAR_111,
  GRAMMAR_112,
  GRAMMAR_113,
  GRAMMAR_114,
  GRAMMAR_115,
  GRAMMAR_116,
  GRAMMAR_117,
  GRAMMAR_118,
  GRAMMAR_119,
  GRAMMAR_120,
  GRAMMAR_121,
  GRAMMAR_122,
  GRAMMAR_123,
  GRAMMAR_124,
  GRAMMAR_125,
  GRAMMAR_126,
  GRAMMAR_127,
  GRAMMAR_128,
  GRAMMAR_129,
  GRAMMAR_130,
  GRAMMAR_131,
  GRAMMAR_132,
  GRAMMAR_133,
  GRAMMAR_134,
  GRAMMAR_135,
  GRAMMAR_136,
  GRAMMAR_137,
  GRAMMAR_138,
  GRAMMAR_139,
  GRAMMAR_140,
  GRAMMAR_141,
  GRAMMAR_142,
  GRAMMAR_143,
  GRAMMAR_144,
  GRAMMAR_145,
  GRAMMAR_146,
  GRAMMAR_147,
  GRAMMAR_148,
  GRAMMAR_149,
  GRAMMAR_150,
  GRAMMAR_151,
  GRAMMAR_152,
  GRAMMAR_153,
  GRAMMAR_154,
  GRAMMAR_155,
  GRAMMAR_156,
  GRAMMAR_157,
  GRAMMAR_158,
  GRAMMAR_159,
  GRAMMAR_160,
  GRAMMAR_161,
  GRAMMAR_162,
  GRAMMAR_163,
  GRAMMAR_164,
  GRAMMAR_165,
  GRAMMAR_166,
  GRAMMAR_167,
  GRAMMAR_168,
  GRAMMAR_169,
  GRAMMAR_170,
  GRAMMAR_171,
  GRAMMAR_172,
  GRAMMAR_173,
  GRAMMAR_174,
  GRAMMAR_175,
  GRAMMAR_176,
  GRAMMAR_177,
  GRAMMAR_178,
  GRAMMAR_179,
  GRAMMAR_180,
  GRAMMAR_181,
  GRAMMAR_182,
  GRAMMAR_183,
  GRAMMAR_184,
  GRAMMAR_185,
  GRAMMAR_186,
  GRAMMAR_187,
  GRAMMAR_188,
  GRAMMAR_189,
  GRAMMAR_190,
  GRAMMAR_191,
  GRAMMAR_192,
  GRAMMAR_193,
  GRAMMAR_194,
  GRAMMAR_195,
  GRAMMAR_196,
  GRAMMAR_197,
  GRAMMAR_198,
  GRAMMAR_199,
  GRAMMAR_200,
  GRAMMAR_201,
  GRAMMAR_202,
  GRAMMAR_203,
  GRAMMAR_204,
  GRAMMAR_205,
  GRAMMAR_206,
  GRAMMAR_207,
  GRAMMAR_208,
  GRAMMAR_209,
  GRAMMAR_210,
  GRAMMAR_211,
  GRAMMAR_212,
  GRAMMAR_213,
  GRAMMAR_214,
  GRAMMAR_215,
  GRAMMAR_216,
  GRAMMAR_217,
  GRAMMAR_218,
  GRAMMAR_219,
  GRAMMAR_220,
  GRAMMAR_221,
  GRAMMAR_222,
  GRAMMAR_223,
  GRAMMAR_224,
  GRAMMAR_225,
  GRAMMAR_226,
  GRAMMAR_227,
  GRAMMAR_228,
  GRAMMAR_229,
  GRAMMAR_230,
  GRAMMAR_231,
  GRAMMAR_232,
  GRAMMAR_233,
  GRAMMAR_234,
  GRAMMAR_235,
  GRAMMAR_236,
  GRAMMAR_237,
  GRAMMAR_238,
  GRAMMAR_239,
  GRAMMAR_240,
  GRAMMAR_241,
  GRAMMAR_242,
  GRAMMAR_243,
  GRAMMAR_244,
  GRAMMAR_245,
  GRAMMAR_246,
  GRAMMAR_247,
  GRAMMAR_248,
  GRAMMAR_249,
  GRAMMAR_250,
  GRAMMAR_251,
  GRAMMAR_252,
  GRAMMAR_253,
  GRAMMAR_254,
  GRAMMAR_255,
  GRAMMAR_256,
  GRAMMAR_257,
  GRAMMAR_258,
  GRAMMAR_259,
  GRAMMAR_260,
  GRAMMAR_261,
  GRAMMAR_262,
  GRAMMAR_263,
  GRAMMAR_264,
  GRAMMAR_265,
  GRAMMAR_266,
  GRAMMAR_267,
  GRAMMAR_268,
  GRAMMAR_269,
  GRAMMAR_270,
  GRAMMAR_271,
  GRAMMAR_272,
  GRAMMAR_273,
  GRAMMAR_274,
  GRAMMAR_275,
  GRAMMAR_276,
  GRAMMAR_277,
  GRAMMAR_278,
  GRAMMAR_279,
  GRAMMAR_280,
  GRAMMAR_281,
  GRAMMAR_282,
  GRAMMAR_283,
  GRAMMAR_284,
  GRAMMAR_285,
  GRAMMAR_286,
  GRAMMAR_287,
  GRAMMAR_288,
  GRAMMAR_289,
  GRAMMAR_290,
  GRAMMAR_291,
  GRAMMAR_292,
  GRAMMAR_293,
  GRAMMAR_294,
  GRAMMAR_295,
  GRAMMAR_296,
  GRAMMAR_297,
  GRAMMAR_298,
  GRAMMAR_299,
  GRAMMAR_300,
  GRAMMAR_301,
  GRAMMAR_302,
  GRAMMAR_303,
  GRAMMAR_304,
  GRAMMAR_305,
  GRAMMAR_306,
  GRAMMAR_307,
  GRAMMAR_308,
  GRAMMAR_309,
  GRAMMAR_310,
  GRAMMAR_311,
  GRAMMAR_312,
  GRAMMAR_313,
  GRAMMAR_314,
  GRAMMAR_315,
  GRAMMAR_316,
  GRAMMAR_317,

};
#define DEFINE_EXI_GRAMMAR(prefix, grammarSetName) \
EmberExiGrammarSet grammarSetName = { 318, 9, 10, topLevelQnames, qnameSparseEventCodes, grammars, productions}; \
const char * const grammarSetName##XsdFile = "sep_r60.xsd";

#endif // __EMBER_EXI_GENERATED_FILE_GRAMMAR__
