// This file is generated by Ember Desktop.  Please do not edit manually.
//
//

// Enclosing macro to prevent multiple inclusion
#ifndef __AF_ENDPOINT_CONFIG__
#define __AF_ENDPOINT_CONFIG__


// Fixed number of defined endpoints
#define FIXED_ENDPOINT_COUNT 1




// Generated attributes
#define GENERATED_ATTRIBUTES { \
    { 0x0000, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x01 } }, /* 0 / Basic / ZCL version*/\
    { 0x0001, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x00 } }, /* 1 / Basic / application version*/\
    { 0x0002, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x00 } }, /* 2 / Basic / stack version*/\
    { 0x0003, ZCL_INT8U_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x00 } }, /* 3 / Basic / hardware version*/\
    { 0x0004, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 4 / Basic / manufacturer name*/\
    { 0x0005, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 33, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 5 / Basic / model identifier*/\
    { 0x0006, ZCL_CHAR_STRING_ATTRIBUTE_TYPE, 17, (ATTRIBUTE_MASK_SINGLETON), { NULL } }, /* 6 / Basic / date code*/\
    { 0x0007, ZCL_ENUM8_ATTRIBUTE_TYPE, 1, (ATTRIBUTE_MASK_SINGLETON), { (int8u*)0x00 } }, /* 7 / Basic / power source*/\
    { 0x0000, ZCL_INT16U_ATTRIBUTE_TYPE, 2, (ATTRIBUTE_MASK_WRITABLE), { (int8u*)0x0000 } }, /* 8 / Identify / identify time*/\
  }


// Cluster function static arrays
#define GENERATED_FUNCTION_ARRAYS \
const EmberAfGenericClusterFunction emberAfFuncArrayIdentifyClusterServer[] = { (EmberAfGenericClusterFunction)emberAfIdentifyClusterServerInitCallback,(EmberAfGenericClusterFunction)emberAfIdentifyClusterServerAttributeChangedCallback}; \
const EmberAfGenericClusterFunction emberAfFuncArrayOnOffClusterClient[] = { (EmberAfGenericClusterFunction)emberAfOnOffClusterClientInitCallback}; \


// Clusters defitions
#define GENERATED_CLUSTERS { \
    { 0x0000, (EmberAfAttributeMetadata*)&(generatedAttributes[0]), 8, 0, (CLUSTER_MASK_SERVER), NULL,  },    \
    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 0, 0, (CLUSTER_MASK_CLIENT), NULL,  },    \
    { 0x0003, (EmberAfAttributeMetadata*)&(generatedAttributes[8]), 1, 2, (CLUSTER_MASK_SERVER| CLUSTER_MASK_INIT_FUNCTION| CLUSTER_MASK_ATTRIBUTE_CHANGED_FUNCTION), emberAfFuncArrayIdentifyClusterServer, },    \
    { 0x0006, (EmberAfAttributeMetadata*)&(generatedAttributes[9]), 0, 0, (CLUSTER_MASK_CLIENT| CLUSTER_MASK_INIT_FUNCTION), emberAfFuncArrayOnOffClusterClient, },    \
  }


// Endpoint types
#define GENERATED_ENDPOINT_TYPES {        \
    { (EmberAfCluster*)&(generatedClusters[0]), 4, 2 }, \
  }


// Networks
#define EMBER_AF_GENERATED_NETWORKS { \
  { \
    EM_AF_NETWORK_TYPE_ZIGBEE_PRO, \
    { \
      .pro = { \
        ZA_SLEEPY_END_DEVICE, \
        EMBER_AF_SECURITY_PROFILE_HA, \
      } \
    } \
  }, \
  { \
    EM_AF_NETWORK_TYPE_ZIGBEE_RF4CE, \
    { \
      .rf4ce = { \
        EM_AF_RF4CE_NODE_TYPE_TARGET, \
      } \
    } \
  }, \
}
#define EMBER_AF_GENERATED_NETWORK_STRINGS  \
  "PRO (pro)", \
  "RF4CE (rf4ce)", \


// Cluster manufacturer codes
#define GENERATED_CLUSTER_MANUFACTURER_CODES {      \
{0x00, 0x00} \
  }
#define GENERATED_CLUSTER_MANUFACTURER_CODE_COUNT 0

// Attribute manufacturer codes
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODES {      \
{0x00, 0x00} \
  }
#define GENERATED_ATTRIBUTE_MANUFACTURER_CODE_COUNT 0


// Largest attribute size is needed for various buffers
#define ATTRIBUTE_LARGEST 33
// Total size of singleton attributes
#define ATTRIBUTE_SINGLETONS_SIZE 88

// Total size of attribute storage
#define ATTRIBUTE_MAX_SIZE 2

// Array of endpoints that are supported
#define FIXED_ENDPOINT_ARRAY { 1 }

// Array of profile ids
#define FIXED_PROFILE_IDS { 260 }

// Array of profile ids
#define FIXED_DEVICE_IDS { 0 }

// Array of profile ids
#define FIXED_DEVICE_VERSIONS { 0 }

// Array of endpoint types supported on each endpoint
#define FIXED_ENDPOINT_TYPES { 0 }

// Array of networks supported on each endpoint
#define FIXED_NETWORKS { 0 }


// Code used to configure the cluster event mechanism
#define EMBER_AF_GENERATED_EVENT_CODE \
  EmberEventControl emberAfIdentifyClusterServerTickCallbackControl1; \
  extern EmberEventControl emberAfPluginIdentifyFeedbackProvideFeedbackEventControl; \
  extern void emberAfPluginIdentifyFeedbackProvideFeedbackEventHandler(void); \
  extern EmberEventControl emberAfPluginNetworkFindTickEventControl; \
  extern void emberAfPluginNetworkFindTickEventHandler(void); \
  extern EmberEventControl emberAfPluginRf4ceMsoUserControlEventControl; \
  extern void emberAfPluginRf4ceMsoUserControlEventHandler(void); \
  extern EmberEventControl emberAfPluginRf4ceMsoCheckValidationEventControl; \
  extern void emberAfPluginRf4ceMsoCheckValidationEventHandler(void); \
  extern EmberEventControl emberAfPluginRf4ceMsoSetGetAttributeEventControl; \
  extern void emberAfPluginRf4ceMsoSetGetAttributeEventHandler(void); \
  extern EmberEventControl emberAfPluginRf4ceMsoBlackoutEventControl; \
  extern void emberAfPluginRf4ceMsoBlackoutEventHandler(void); \
  extern EmberEventControl emberAfPluginRf4ceMsoValidationEventControl; \
  extern void emberAfPluginRf4ceMsoValidationEventHandler(void); \
  extern EmberEventControl emberAfPluginRf4ceMsoWatchdogEventControl; \
  extern void emberAfPluginRf4ceMsoWatchdogEventHandler(void); \
  extern EmberEventControl emberAfPluginRf4ceZrc11PairingEventControl; \
  extern void emberAfPluginRf4ceZrc11PairingEventHandler(void); \
  extern EmberEventControl emberAfPluginRf4ceZrc11IncomingUserControlEventControl; \
  extern void emberAfPluginRf4ceZrc11IncomingUserControlEventHandler(void); \
  extern EmberEventControl emberAfPluginRf4ceZrc11OutgoingUserControlEventControl; \
  extern void emberAfPluginRf4ceZrc11OutgoingUserControlEventHandler(void); \
  static void networkEventWrapper(EmberEventControl *control, EmberAfNetworkEventHandler handler, int8u networkIndex) \
  { \
    emberAfPushNetworkIndex(networkIndex); \
    emberEventControlSetInactive(*control); \
    (*handler)(); \
    emberAfPopNetworkIndex(); \
  } \
  EmberEventControl emberAfPluginEndDeviceSupportPollingNetworkEventControls[2]; \
  extern void emberAfPluginEndDeviceSupportPollingNetworkEventHandler(void); \
  void emberAfPluginEndDeviceSupportPollingNetworkEventWrapper0(void) { networkEventWrapper(&emberAfPluginEndDeviceSupportPollingNetworkEventControls[0], emberAfPluginEndDeviceSupportPollingNetworkEventHandler, 0); } \
  void emberAfPluginEndDeviceSupportPollingNetworkEventWrapper1(void) { networkEventWrapper(&emberAfPluginEndDeviceSupportPollingNetworkEventControls[1], emberAfPluginEndDeviceSupportPollingNetworkEventHandler, 1); } \
  EmberEventControl emberAfPluginEndDeviceSupportMoveNetworkEventControls[2]; \
  extern void emberAfPluginEndDeviceSupportMoveNetworkEventHandler(void); \
  void emberAfPluginEndDeviceSupportMoveNetworkEventWrapper0(void) { networkEventWrapper(&emberAfPluginEndDeviceSupportMoveNetworkEventControls[0], emberAfPluginEndDeviceSupportMoveNetworkEventHandler, 0); } \
  void emberAfPluginEndDeviceSupportMoveNetworkEventWrapper1(void) { networkEventWrapper(&emberAfPluginEndDeviceSupportMoveNetworkEventControls[1], emberAfPluginEndDeviceSupportMoveNetworkEventHandler, 1); } \
  extern EmberEventControl autoToggleEventControl; \
  extern void autoToggleEventHandler(void); \
  extern EmberEventControl dialogMenuEventControl; \
  extern void dialogMenuEventHandler(void); \
  extern EmberEventControl networkStartEventControl; \
  extern void networkStartEventHandler(void); \
  extern EmberEventControl readAttributeEventControl; \
  extern void readAttributeEventHandler(void); \
  extern EmberEventControl readAttributeTimeoutEventControl; \
  extern void readAttributeTimeoutEventHandler(void); \
  static void clusterTickWrapper(EmberEventControl *control, EmberAfTickFunction callback, int8u endpoint) \
  { \
    emberAfPushEndpointNetworkIndex(endpoint); \
    emberEventControlSetInactive(*control); \
    (*callback)(endpoint); \
    emberAfPopNetworkIndex(); \
  } \
  void emberAfIdentifyClusterServerTickCallbackWrapperFunction1(void) { clusterTickWrapper(&emberAfIdentifyClusterServerTickCallbackControl1, emberAfIdentifyClusterServerTickCallback, 1); } \


// EmberEventData structs used to populate the EmberEventData table
#define EMBER_AF_GENERATED_EVENTS   \
  { &emberAfIdentifyClusterServerTickCallbackControl1, emberAfIdentifyClusterServerTickCallbackWrapperFunction1 }, \
  { &emberAfPluginIdentifyFeedbackProvideFeedbackEventControl, emberAfPluginIdentifyFeedbackProvideFeedbackEventHandler }, \
  { &emberAfPluginNetworkFindTickEventControl, emberAfPluginNetworkFindTickEventHandler }, \
  { &emberAfPluginRf4ceMsoUserControlEventControl, emberAfPluginRf4ceMsoUserControlEventHandler }, \
  { &emberAfPluginRf4ceMsoCheckValidationEventControl, emberAfPluginRf4ceMsoCheckValidationEventHandler }, \
  { &emberAfPluginRf4ceMsoSetGetAttributeEventControl, emberAfPluginRf4ceMsoSetGetAttributeEventHandler }, \
  { &emberAfPluginRf4ceMsoBlackoutEventControl, emberAfPluginRf4ceMsoBlackoutEventHandler }, \
  { &emberAfPluginRf4ceMsoValidationEventControl, emberAfPluginRf4ceMsoValidationEventHandler }, \
  { &emberAfPluginRf4ceMsoWatchdogEventControl, emberAfPluginRf4ceMsoWatchdogEventHandler }, \
  { &emberAfPluginRf4ceZrc11PairingEventControl, emberAfPluginRf4ceZrc11PairingEventHandler }, \
  { &emberAfPluginRf4ceZrc11IncomingUserControlEventControl, emberAfPluginRf4ceZrc11IncomingUserControlEventHandler }, \
  { &emberAfPluginRf4ceZrc11OutgoingUserControlEventControl, emberAfPluginRf4ceZrc11OutgoingUserControlEventHandler }, \
  { &emberAfPluginEndDeviceSupportPollingNetworkEventControls[0], emberAfPluginEndDeviceSupportPollingNetworkEventWrapper0 }, \
  { &emberAfPluginEndDeviceSupportPollingNetworkEventControls[1], emberAfPluginEndDeviceSupportPollingNetworkEventWrapper1 }, \
  { &emberAfPluginEndDeviceSupportMoveNetworkEventControls[0], emberAfPluginEndDeviceSupportMoveNetworkEventWrapper0 }, \
  { &emberAfPluginEndDeviceSupportMoveNetworkEventControls[1], emberAfPluginEndDeviceSupportMoveNetworkEventWrapper1 }, \
  { &autoToggleEventControl, autoToggleEventHandler }, \
  { &dialogMenuEventControl, dialogMenuEventHandler }, \
  { &networkStartEventControl, networkStartEventHandler }, \
  { &readAttributeEventControl, readAttributeEventHandler }, \
  { &readAttributeTimeoutEventControl, readAttributeTimeoutEventHandler }, \


#define EMBER_AF_GENERATED_EVENT_STRINGS   \
  "Identify Cluster Server EP 1",  \
  "Identify Feedback Plugin ProvideFeedback",  \
  "Network Find Plugin Tick",  \
  "RF4CE Multiple System Operators Profile Plugin UserControl",  \
  "RF4CE Multiple System Operators Profile Plugin CheckValidation",  \
  "RF4CE Multiple System Operators Profile Plugin SetGetAttribute",  \
  "RF4CE Multiple System Operators Profile Plugin Blackout",  \
  "RF4CE Multiple System Operators Profile Plugin Validation",  \
  "RF4CE Multiple System Operators Profile Plugin Watchdog",  \
  "ZigBee Remote Control 1.1 Profile Plugin Pairing",  \
  "ZigBee Remote Control 1.1 Profile Plugin IncomingUserControl",  \
  "ZigBee Remote Control 1.1 Profile Plugin OutgoingUserControl",  \
  "End Device Support Plugin Polling NWK 0", \
  "End Device Support Plugin Polling NWK 1", \
  "End Device Support Plugin Move NWK 0", \
  "End Device Support Plugin Move NWK 1", \
  "autoToggle Custom",  \
  "dialogMenu Custom",  \
  "networkStart Custom",  \
  "readAttribute Custom",  \
  "readAttributeTimeout Custom",  \


// The length of the event context table used to track and retrieve cluster events
#define EMBER_AF_EVENT_CONTEXT_LENGTH 1

// EmberAfEventContext structs used to populate the EmberAfEventContext table
#define EMBER_AF_GENERATED_EVENT_CONTEXT { 0x1, 0x3, FALSE, EMBER_AF_LONG_POLL, EMBER_AF_OK_TO_SLEEP, &emberAfIdentifyClusterServerTickCallbackControl1}


#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_DECLARATIONS \
  void emberAfPluginAddressTableInitCallback(void); \
  void emberAfPluginEndDeviceSupportInitCallback(void); \
  void emberAfPluginNetworkFindInitCallback(void); \
  void emberAfPluginRf4ceMsoInitCallback(void); \
  void emberAfPluginRf4ceProfileInitCallback(void); \


#define EMBER_AF_GENERATED_PLUGIN_INIT_FUNCTION_CALLS \
  emberAfPluginAddressTableInitCallback(); \
  emberAfPluginEndDeviceSupportInitCallback(); \
  emberAfPluginNetworkFindInitCallback(); \
  emberAfPluginRf4ceMsoInitCallback(); \
  emberAfPluginRf4ceProfileInitCallback(); \


#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_DECLARATIONS \
  void emberAfPluginAddressTableNcpInitCallback(boolean memoryAllocation); \
  void emberAfPluginRf4ceProfileNcpInitCallback(boolean memoryAllocation); \


#define EMBER_AF_GENERATED_PLUGIN_NCP_INIT_FUNCTION_CALLS \
  emberAfPluginAddressTableNcpInitCallback(memoryAllocation); \
  emberAfPluginRf4ceProfileNcpInitCallback(memoryAllocation); \


#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_DECLARATIONS \
  void emberAfPluginEndDeviceSupportStackStatusCallback(EmberStatus status); \
  void emberAfPluginNetworkFindStackStatusCallback(EmberStatus status); \


#define EMBER_AF_GENERATED_PLUGIN_STACK_STATUS_FUNCTION_CALLS \
  emberAfPluginEndDeviceSupportStackStatusCallback(status); \
  emberAfPluginNetworkFindStackStatusCallback(status); \


// Generated data for the command discovery
#define GENERATED_COMMANDS { \
    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / Identify */ \
    { 0x0003, 0x00, COMMAND_MASK_OUTGOING_SERVER }, /* Identify / IdentifyQueryResponse */ \
    { 0x0003, 0x01, COMMAND_MASK_OUTGOING_CLIENT | COMMAND_MASK_INCOMING_SERVER }, /* Identify / IdentifyQuery */ \
    { 0x0006, 0x00, COMMAND_MASK_OUTGOING_CLIENT }, /* On/off / Off */ \
    { 0x0006, 0x01, COMMAND_MASK_OUTGOING_CLIENT }, /* On/off / On */ \
    { 0x0006, 0x02, COMMAND_MASK_OUTGOING_CLIENT }, /* On/off / Toggle */ \
  }
#define EMBER_AF_GENERATED_COMMAND_COUNT 6
#endif // __AF_ENDPOINT_CONFIG__
